<krpano>

	<!-- krpano 1.23 - Virtual Tour Skin -->

	<include url="%VIEWER%/plugins/krpanomaps.xml" />
	<!-- skin settings (can be overridden in the tour.xml) -->
	<skin_settings maps="false"
	               maps_type="openstreetmaps"
	               maps_bing_api_key=""
	               maps_google_api_key=""
	               maps_zoombuttons="false"
	               maps_loadonfirstuse="true"
	               gyro="true"
	               gyro_keeplookingdirection="false"
	               webvr="true"
	               webvr_keeplookingdirection="true"
	               webvr_prev_next_hotspots="true"
	               autotour="false"
	               littleplanetintro="false"
	               followmousecontrol="false"
	               title="false"
	               thumbs="true"
	               thumbs_width="120" thumbs_height="80" thumbs_padding="10" thumbs_crop="0|40|240|160"
	               thumbs_opened="false"
	               thumbs_text="false"
	               thumbs_dragging="true"
	               thumbs_onhoverscrolling="false"
	               thumbs_scrollbuttons="false"
	               thumbs_scrollindicator="false"
	               thumbs_loop="true"
	               tooltips_buttons="true"
	               tooltips_thumbs="false"
	               tooltips_hotspots="false"
	               tooltips_mapspots="false"
	               deeplinking="false"
	               loadscene_flags="MERGE"
	               loadscene_blend="OPENBLEND(0.5, 0.0, 0.75, 0.05, linear)"
	               loadscene_blend_prev="SLIDEBLEND(0.5, 180, 0.75, linear)"
	               loadscene_blend_next="SLIDEBLEND(0.5, 180, 0.75, linear)"
	               loadingtext=""
	               layout_width="100%"
	               layout_maxwidth="814"
	               controlbar_width="-24"
	               controlbar_height="40"
	               controlbar_offset="20"
	               controlbar_offset_closed="-40"
	               controlbar_overlap.no-fractionalscaling="10"
	               controlbar_overlap.fractionalscaling="0"
	               design_skin_images="vtourskin.png"
	               design_bgcolor="0x2D3E50"
	               design_bgalpha="0.8"
	               design_bgborder="0"
	               design_bgroundedge="7"
	               design_bgshadow="0 4 10 0x000000 0.3"
	               design_thumbborder_bgborder="3 0xFFFFFF 1.0"
	               design_thumbborder_padding="2"
	               design_thumbborder_bgroundedge="1"
	               design_text_css="color:#FFFFFF; font-family:Arial;"
	               design_text_txtshadow="1 1 4 0x000000 1.0"
	               />

	<scence_array name=""></scence_array>

	<set var="view_360" val="none" />
	<set var="check_click" val="false" />
	<set var="click_title_flg" val="false" />
	<set var="first_drag" val="true" />
	<set var="idle_enabled" val="true" />
	<set var="menu_items" val="'scene_chua_long_son_01|Chùa Long Sơn|chua-long-son,scene_mat_tien|Tháp Bà Ponagar|thap-ponagar,scene_vinpearl_land_01|VinWonder|vin-wonder,scene_quang_truong_04|Quảng Trường 2-4|quang-truong,scene_bai_bien_tran_phu_01|Bãi Biển Trần Phú|bai-bien,scene_ben_ngoai|Viện Hải Dương Học|vien-hai-duong-hoc'" />
	<set var="menu_mobile_items" val="'scene_chua_long_son_01|Chùa Long Sơn|chua-long-son,scene_mat_tien|Tháp Bà Ponagar|thap-ponagar,scene_vinpearl_land_01|VinWonder|vin-wonder,scene_quang_truong_04|Quảng Trường 2-4|quang-truong,scene_bai_bien_tran_phu_01|Bãi Biển Trần Phú|bai-bien,scene_ben_ngoai|Viện Hải Dương Học|vien-hai-duong-hoc'" />
	
	<!-- save the url path of this xml file (the url value will be adjusted during xml parsing) -->
	<vtourskinxmlpath url="./" />

	<!-- iPhone X safe-area support: use the horizontal safe-area only -->	
	<display safearea="h-only" />
	<display maxpixelzoom="1.0" details="24" />
	<view fov="75" fovmin="65" fovmax="100" />
	<!-- mouse / touch / keyboard(button) control settings - https://krpano.com/docu/xml/#control -->
	<control mouse="drag"
	         touch="drag"
	         zoomtocursor="false"
	         zoomoutcursor="false"
	         draginertia="0.1"
	         dragfriction="0.9"
	         movetoaccelerate="1.0"
	         movetospeed="10.0"
	         movetofriction="0.8"
	         keybaccelerate="0.09"
	         keybfriction="0.94"
	         keybfovchange="0.25"
	         mousefovchange="1.0"
	         fovspeed="3.0"
	         fovfriction="0.9"
	         bouncinglimits="true"
	         />
	<data name="next-tour"><![CDATA[
		Hành trình tiếp theo: Khám Phá Đảo Và Ngoại Ô</br>
		🐚Đảo Hòn Mun: Nổi tiếng với rạn san hô rực rỡ, thiên đường lặn ngắm biển hiếm có.</br>
		🌴Đảo Hòn Tằm: Không gian nghỉ dưỡng yên bình, bãi cát mịn và dịch vụ sang trọng.</br>
		🛍️Chợ Đầm: Trung tâm mua sắm sầm uất, nơi tìm thấy đủ loại đặc sản và quà lưu niệm.</br>
		⛴️Bến du thuyền Ana Marina: Điểm hẹn sang trọng ngắm hoàng hôn, hòa mình giữa không gian biển và nhịp sống hiện đại.        ]]>
	</data>
	<!-- mouse cursors - https://krpano.com/docu/xml/#cursors -->
	<cursors standard="default"
	         dragging="move"
	         moving="move"
	         />
	<hotspot name="thumb_wall"
         style="hittesttextfield"
         ath="0"
         atv="0"
         width="800"
         height="500"
         visible="false"
         zorder="10"
         distorted="true"
         depth="1000"
         keep="true"
         background="true"
         bgcolor="0xFFFFFF"
         bgalpha="0.3" />

	<hotspot name="close_button_wall"
		type="image"
		url="icons/close.png"
		ath="0"
		atv="0"
		ox="380"
		oy="-230"
		scale="1"
		width="32"
		height="32"
		distorted="true"
		handcursor="true"
		zorder="11"
		depth="1001"
        visible="false"
		keep="true"
		onclick="hide_all_thumbs();" />

	<!-- ensure stagescale 2x for mobile devices (regardless if mobilescale is 0.5 or 1.0) -->
	<krpano stagescale="calc:stagescale * 2" if="stagescale LT 1.0" devices="mobile" />

	<!-- skin styles -->

	<!-- skin_base - the base skin image -->
	<style name="skin_base" url="calc:vtourskinxmlpath.url + skin_settings.design_skin_images" />

	<style name="skin_hover"
		scalechildren="false"
		ondown.addevent="copy(skin_lockglow,name); skin_hover(get(name));"
		onover.addevent="if(skin_lockglow === null, copy(skin_lockglow,name); skin_hover(get(name),0.3) );"
		onout.addevent="if(skin_lockglow === name AND !pressed, skin_hover(null, null, get(name));delete(skin_lockglow); );"
		onclick.addevent="if(skin_lockglow === name AND !pressed, skin_hover(null, null, get(name)););"
		onup.addevent="delayedcall(0, if(hovering AND enabled, skin_hover(get(name),0.3); , skin_hover(null);delete(skin_lockglow); ); );"/>
	<style name="map_hover" ondown.addevent="map_hover();" onover.addevent="map_hover();" onout.addevent="map_hover('1');" onup.addevent="map_hover('1');"/>
	<style name="locate_map_hover" ondown.addevent="locate_map_hover();" onover.addevent="locate_map_hover();" onout.addevent="locate_map_hover('1');" onup.addevent="locate_map_hover('1');"/>

	<!-- skin_glow - button glowing -->
	<style name="skin_glow"
	       scalechildren="false"
	       ondown.addevent="copy(skin_lockglow,name); skin_buttonglow(get(name));"
	       onover.addevent="if(skin_lockglow === null, copy(skin_lockglow,name); skin_buttonglow(get(name),0.3) );"
	       onout.addevent="if(skin_lockglow === name AND !pressed, skin_buttonglow(null);delete(skin_lockglow); );"
	       onup.addevent="delayedcall(0, if(hovering AND enabled, skin_buttonglow(get(name),0.3); , skin_buttonglow(null);delete(skin_lockglow); ); );"
	       />

	<!-- skin_thumbtext_style - style/textfield for the (optional, skin_settings.thumbs_text) thumbnails texts -->
	<style name="skin_thumbtext_style" type="text" align="bottom" width="100%" y="5" enabled="false" bg="false" bgborder="false" css="calc:skin_settings.design_text_css + ' text-align:center; font-size:10px;'" txtshadow="get:skin_settings.design_text_txtshadow" />

	<!-- skin_hotspotstyle - style for the hotspots -->
	<style name="skin_hotspotstyle" url="icons/arrow_ahead.png" edge="top" distorted="true"
	       tooltip=""
	       linkedscene=""
	       linkedscene_lookat=""
	       linkedscene_hoffset="0"
	       use3dtransition="false"
	       onclick="skin_hotspotstyle_click();"
	       depth="1000"
	       scale="1"
	       onover.addevent="tween(scale,1.2);"
	       onout.addevent="tween(scale,1);"
	       onloaded.addevent="skin_hotspotstyle_setup(); do_crop_animation(128,128,30);"
	       />

	<action name="hotspot_flycam_thumb" scope="local" args="isTrue">
		if(isTrue,
			set(hotspot[calc(get(caller.name) +'thumb')].visible, true);
			set(hotspot[calc(get(caller.name) +'text')].visible, true);
			set(skin_settings.autotour, false);
			autorotate.stop();
			,
			set(hotspot[calc(get(caller.name) +'thumb')].visible, false);
			set(hotspot[calc(get(caller.name) +'text')].visible, false);
			set(skin_settings.autotour, true);
			autorotate.start();
		);
		
	</action>
	<action name="do_crop_animation" scope="local" args="framewidth, frameheight, framerate">
		if(isvalue(caller.linkedscene) AND skin_settings.tooltips_hotspots,
			copy(caller.tooltip, scene[get(caller.linkedscene)].title);
			caller.loadstyle(skin_tooltips);
		);
		set(caller.oy, 0);
		<!-- define local variables -->
		calc(local.xframes, (caller.imagewidth /framewidth) BOR 0);
		calc(local.frames, xframes * ((caller.imageheight / frameheight) BOR 0));
		def(local.frame, integer, 0);
		
		<!-- set the first frame -->
		calc(caller.crop, '0|0|' + framewidth + '|' + frameheight);
		
		<!-- do the animation -->
		setinterval(calc('crop_anim_' + caller.name), calc(1.0 / framerate),
			if(caller.loaded,
				inc(frame);
				if(frame GE frames, if(caller.onlastframe !== null, callwith(caller, onlastframe() ) ); set(frame,0); );
				mod(xpos, frame, xframes);
				div(ypos, frame, xframes);
				Math.floor(ypos);
				mul(xpos, framewidth);
				mul(ypos, frameheight);
				calc(caller.crop, xpos + '|' + ypos + '|' + framewidth + '|' + frameheight);
			  ,
				<!-- stop the interval when the hotspot gets removed -->
				clearinterval(calc('crop_anim_' + caller.name));
			);
		);
	</action>

	<action name="skin_hotspotstyle_setup" scope="local">
		if(isvalue(caller.linkedscene) AND skin_settings.tooltips_hotspots,
			copy(caller.tooltip, scene[get(caller.linkedscene)].title);
			caller.loadstyle(skin_tooltips);
		);
		set(caller.oy, 0);
	</action>

	<action name="skin_hotspotstyle_click" scope="local">
		set(global.scence_array[get(global.scence_array.count)], get(scene[get(xml.scene)].name));
		set(global.scence_array.count, calc(global.scence_array.count + 1));
		if(isvalue(caller.linkedscene),
			copy(hs_linkedscene, caller.linkedscene);
			set(caller.enabled, false);
			skin_hidetooltips();
			if(caller.use3dtransition,
				skin_scene3dtransition(get(hs_linkedscene),get(caller.linkedscene_hoffset));
			  ,
				if(caller.linkedscene_lookat, txtsplit(caller.linkedscene_lookat, ',', hs_lookat_h, hs_lookat_v, hs_lookat_fov); );
				tween(caller.depth|caller.alpha|caller.oy|caller.rx, 4000|0.0|-50|-60, 0.5, default,
					skin_loadscene(get(hs_linkedscene), get(skin_settings.loadscene_blend));
					if(hs_lookat_h !== null, skin_lookat(get(hs_lookat_h), get(hs_lookat_v), get(hs_lookat_fov)); );
				);
			);
		);
	</action>
	
	<action name="skin_scene3dtransition" scope="local" args="scenename, hlookatoffset">
		motionblur = 0.5;
		transitiondelay = 0.0;
		transitiontime = 0.5;
		transitiontweentype = "easeoutquad";
		
		if(caller AND caller.ishotspot,
			<!-- called from a hotspot, move toward the hotspot -->
			if(caller.depth == 0,
				<!-- 3d placed hotspot -->
				set3dtransition("image", caller.tx,caller.ty,caller.tz, motionblur, hlookatoffset, transitiondelay, transitiontime, transitiontweentype);
			  ,
				<!-- a hotspot with a spherical position -->
				caller.getcenter(h,v);
				if(v GT -50 AND v LT +50 AND caller.depth GT 120, set(v,0));
				set3dtransition("sphere", h,v,(min(caller.depth,1000)), motionblur, hlookatoffset, transitiondelay, transitiontime, transitiontweentype);
			);
		  ,
			<!-- called from a layer or a script, recenter at the new pano center (3d-model/depthmap panos only) -->
			if(image.depthmap.url,
				set3dtransition("image", 0,0,0, motionblur, hlookatoffset, transitiondelay, transitiontime, transitiontweentype);
			);
		);
		
		loadscene(get(scenename), null, MERGE, BLEND(get(transitiontime),get(transitiontweentype)));
	</action>
	

	<!-- skin_tooltip - style for the thumb, hotspot and mapspot tooltips -->
	<style name="skin_tooltips"
	       onover.addevent.mouse="copy(layer[skin_tooltip].html, tooltip);
	                     set(layer[skin_tooltip].visible, calc(webvr.isenabled ? false : true));
	                     tween(layer[skin_tooltip].alpha, 1.0, 0.1);
	                     asyncloop(hovering, copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
	       onout.addevent.mouse="tween(layer[skin_tooltip].alpha, 0.0, 0.1, default, set(layer[skin_tooltip].visible,false), copy(layer[skin_tooltip].x,mouse.stagex); copy(layer[skin_tooltip].y,mouse.stagey); );"
	       />
	
	<style name="skin_tooltips_left"
	       onover.addevent.mouse="copy(layer[skin_tooltip_left].html, tooltip);
	                     set(layer[skin_tooltip_left].visible, calc(webvr.isenabled ? false : true));
	                     tween(layer[skin_tooltip_left].alpha, 1.0, 0.1);
	                     asyncloop(hovering, copy(layer[skin_tooltip_left].x,mouse.stagex); copy(layer[skin_tooltip_left].y,mouse.stagey); );"
	       onout.addevent.mouse="tween(layer[skin_tooltip_left].alpha, 0.0, 0.1, default, set(layer[skin_tooltip_left].visible,false), copy(layer[skin_tooltip_left].x,mouse.stagex); copy(layer[skin_tooltip_left].y,mouse.stagey); );"
	       />
	
	<!-- add controls for 3D navigation -->
	<!-- <include url="%VIEWER%/plugins/controls3d.xml" /> -->
	
	<!-- use depthbuffer for hotspots rendering -->
	<display depthbuffer="true" />
	
	<!-- a background grid -->
	<preview type="grid" />
<style name="hittesttextfield"
	type="text" textalign="center"
	bgcolor="0x7777DD" bgalpha="0.8" bgborder="1 0x000000 1.0" oversampling="1"
	zorder="1" depthbuffer="true"
	/>
	<!-- the tooltip textfield -->
	<layer name="skin_tooltip" keep="true"
	       type="text"
	       parent="STAGE"
	       visible="false" alpha="0" enabled="false" zorder="2"
	       align="lefttop" edge="bottom" oy="-2" width="200" ox="-50"
	       bgalpha="0.0"
	       txtshadow="get:skin_settings.design_text_txtshadow"
	       css="calc:skin_settings.design_text_css + ' text-align:center; font-size:16px; font-weight:bold;'"
	       html=""
	       />

	<layer name="skin_tooltip_left" keep="true"
	       type="text"
	       parent="STAGE"
	       visible="false" alpha="0" enabled="false" zorder="2"
	       align="lefttop" edge="bottom" oy="-2" width="200" ox="50"
	       bgalpha="0.0"
	       txtshadow="get:skin_settings.design_text_txtshadow"
	       css="calc:skin_settings.design_text_css + ' text-align:center; font-size:16px; font-weight:bold;'"
	       html=""
	       />
	<layer name="menu_box" type="container"
		width="100%" height="50%"
		zorder="4"
		align="left"
		keep="true">
	</layer>
	<layer name="thumb_box" type="container" keep="true"
			align="lefttop" x="0" y="0" width="100%" height="100%"
			bgcolor="0x000000" bgalpha="0.0" roundedge="16" bgborder="0">
		<layer name="thumb_list_container" type="container" bgalpha="0.0" align="lefttop" x="-300" y="20%" width="300" height="70%" keep="true">
			<layer name="thumb_container" 
					type="container" 
					keep="true"
					bgcolor="0xffffff"
					width="100%"
					height="70"
					bgalpha="0.0"
					childmargin="0 10 10 0"
					>
					<layer name="scene_click_close" url="icons/close.png" x="5" align="bottomleft" width="24" height="24" onclick="close_thumb_list();" />
					<layer name="scene_click_title" 
						type="text" 
						html="" 
						align="bottom" 
						onclick="show_more_thumb();"
						height="auto"
						width="80%"
						css="color:#fff; font-size:16px; text-align:center;"
						background="false"
						onover="set(layer[scene_click_title].css, color: red; font-size:16px; text-align:center;)"
						onout="set(layer[scene_click_title].css, color:#fff; font-size:16px; text-align:center;)"
						/>
					<!-- <layer name="scene_click_play" url="icons/play.png" align="bottomright" width="16" height="16" onclick="show_more_thumb();"/> -->
					<!-- <layer name="scene_click_down" url="icons/down.png" align="bottomright" width="16" height="16" visible="false" onclick="show_more_thumb();"/> -->
			</layer>
			<layer name="thumb_container_border" 
				y="70"
				type="container" 
				keep="true"
				bgcolor="0xffffff"
				width="100%"
				height="2"
				bgalpha="1"
				childmargin="0 10 10 0"
				>
			</layer>
			<layer name="thumb_scroll_container" type="container" bgalpha="0.0" align="lefttop" y="72" width="300" height="85%" keep="true">
				<layer name="scrollarea_thumb"
					type="scrollarea"
					align="top" 
					width="100%"
					flowchildren="v"
					draggable="true"
					mwheel="true"
					capturechildren="true"
					autoscrollbars="null,vscrollbar_thumb_grip,10"
					onhover_autoscrolling="false"
					onscroll=""
					onoverflowchange=""
					scrolltype="smooth"
					direction="v"
				>
				</layer>
				<layer name="vscrollbar_thumb_bg" type="container" align="right" width="16" height="0">
					<layer name="vscrollbar_thumb_grip" type="container" align="righttop" width="8" x="4" height="16" bgcolor="0xbd5353" bgalpha="0.5" bgroundedge="7" bgcapture="true" />
				</layer>
			</layer>
		</layer>
	</layer>
	<layer name="image_box" type="container"
		bgcolor="0xffffff"
		width="27%" height="40%"
		zorder="5"
		x="0"
		y="0"
		bgalpha="1"
		visible="false"
		align="center"
		keep="true">
		<layer name="image_demo" type="image"
			bgcolor="0x000000"
			width="98%" height="98%"
			zorder="4"
			x="0"
			y="0"
			align="center"
			keep="true">
		</layer>
	</layer>

	<layer name="menu_box_mobile" type="container" visible="true" height="100%" width="100%" keep="true" bgcapture="true" bg="true" zorder="10000" >
		<layer name="menu_box_mobile_btn_close" url="icons/close.png" align="topleft" height="30" width="30" onclick="close_menu_box_mobile();" zorder="10001"/>
		<layer name="menu_box_mobile_thumb_text" type="text" html="" bgalpha="1" bgcolor="0x302f79" css="text-align:center; font-size:20px; color:0xffffff;"  width="100%" align="topcenter" ondown="close_menu_box_mobile();">
			</layer>
		<layer name="menu_box_mobile_thumb" type="container"  y="30" visible="true" keep="true" height="72%" width="100%" align="top" bg="true" bgcolor="0x849dd2" bgalpha="0.5" bgcapture="true" capture="true" ondown="close_menu_box_mobile();">
			
			<layer name="menu_box_mobile_thumb_child" type="scrollarea" direction="v" draggable="true" mwheel="true" scrolltype="inertia" autoscrollbars="null,vscrollbar_grip,10" bgcapture="false" capture="false" scrollbars="true"  flowchildren="v" width="100%" align="topcenter" onloaded="" capturechildren="true">
			</layer>
		</layer>
		<layer name="menu_box_mobile_title" type="container" visible="true" keep="true" height="25%" width="100%" align="bottom" bg="true" bgcolor="0x849dd2" bgalpha="0.5">
			<layer name="menu_box_mobile_title_child" type="scrollarea" direction="h" draggable="true" mwheel="true" scrolltype="inertia" autoscrollbars="null,vscrollbar_grip,10"  scrollbars="true"  flowchildren="h" height="90%" align="left" onloaded="build_menu_mobile();" capturechildren="true">
				<layer name="menu_box_mobile_title_track" type="container" parent="menu_box_mobile_title_child" height="90%" visible="true" >
				</layer>
			</layer>
		</layer>
	</layer>

	<action name="close_cover_layer">
		set(layer[cover].visible,false);
		set(control.usercontrol, all);
		set(skin_settings.autotour, true);
		autorotate.start();
		set(idle_enabled, true);
		delayedcall(idleswitch, 20, skin_nextscene_loop(+1); );
	</action>

	<action name="build_thumb_mobile"  scope="local" args="scene_doc">
		removelayer(menu_box_mobile_thumb_track, true);
		addlayer(menu_box_mobile_thumb_track);
		set(layer[menu_box_mobile_thumb_track].type, "container");
		set(layer[menu_box_mobile_thumb_track].parent, "menu_box_mobile_thumb_child");
		set(layer[menu_box_mobile_thumb_track].keep, true);
		set(layer[menu_box_mobile_thumb_track].width, "90%");
		set(layer[menu_box_mobile_thumb_track].visible, true);
		set(layer[menu_box_mobile_thumb_track].align, "topcenter");

		if(get(scene_doc) == "chua-long-son", set(layer[menu_box_mobile_thumb_text].html, 'Chùa Long Sơn'); );
		if(get(scene_doc)  == "thap-ponagar", set(layer[menu_box_mobile_thumb_text].html, 'Tháp Bà Panogar'); );
		if(get(scene_doc)  == "vin-wonder", set(layer[menu_box_mobile_thumb_text].html, 'VinWonder'); );
		if(get(scene_doc)  == "quang-truong", set(layer[menu_box_mobile_thumb_text].html, 'Quảng Trường 2-4'); );
		if(get(scene_doc)  == "bai-bien", set(layer[menu_box_mobile_thumb_text].html, 'Bãi biển Trần Phú'); );
		if(get(scene_doc)  == "vien-hai-duong-hoc", set(layer[menu_box_mobile_thumb_text].html, 'Viện Hải Dương Học'); );
		
		set(i, 0);
		for(set(sceneindex, 0), sceneindex LT scene.count, inc(sceneindex),
			if(scene[get(sceneindex)].doc == get(scene_doc),
				copy(scene_name, scene[get(sceneindex)].name);
				copy(scene_title, scene[get(scene_name)].title);

				copy(thumburl, scene[get(scene_name)].thumburl);
				set(temp, calc('skin_loadscene(' + get(scene_name) + ',' + get(skin_settings.loadscene_blend) + ');'));

				addlayer(calc(get(scene_name)+'thumb_mobile'));
				set(layer[calc(get(scene_name)+'thumb_mobile')],parent= 'menu_box_mobile_thumb_track',width=254, height=184, type='container', align='topcenter', x=0, y=calc(10+i*200),  keep=true,  background=true,bgalpha=0.8, zorder=5, bgcolor=0xe8a107, bgroundedge=10, keep=true, maskchildren=true);
			
				addlayer(calc(get(scene_name) + 'thumb_bg_mobile'));
				set(layer[calc(get(scene_name)+'thumb_bg_mobile')],parent= calc(get(scene_name)+'thumb_mobile'),url=get(thumburl),  type='image', width=250,height=180, align='center', keep=true,  background=false, zorder=6, bgroundedge=10,onclick=get(temp));

				addlayer(calc(get(scene_name) + 'thumb_text_mobile'));
				set(layer[calc(get(scene_name)+'thumb_text_mobile')],parent= calc(get(scene_name)+'thumb_mobile'),width=250, state='normal', type='text', align='bottomcenter',  keep=true,  html=get(scene_title), background=false, zorder=6, css='color:#ffffff; font-size:18px;  text-align:center;');
				inc(i);
			);
		);
		set(layer[menu_box_mobile_thumb_track].height, calc(i*200+40));
	</action>

	<action name="build_menu_mobile"  scope="local">
		txtsplit(get(menu_mobile_items), "," , items);
		for(set(i,0), i LT items.count, inc(i),
			txtsplit(get(items[get(i)].value), '|', item);
			set(scene_name, get(item[0].value));
			set(scene_title, get(item[1].value));
			set(scene_doc, get(item[2].value));
			copy(thumburl, scene[get(scene_name)].thumburl);

			addlayer(calc(get(scene_name)+'mobile'));
			set(temp, calc('build_thumb_mobile(' + get(scene_doc) + ');'));
			set(layer[calc(get(scene_name)+'mobile')],parent= 'menu_box_mobile_title_track',width=154, height=134, type='container', align='left', x=calc(20+i*180), y=10,  keep=true, doc=get(scene_doc), background=true,bgalpha=0.8, zorder=5, bgcolor=0xe8a107, bgroundedge=10,  maskchildren=true, zorder=5);
		
			addlayer(calc(get(scene_name) + 'bg_mobile'));
			set(layer[calc(get(scene_name)+'bg_mobile')],parent= calc(get(scene_name)+'mobile'),url=get(thumburl),  type='image', width=150,height=130, align='center', keep=true, doc=get(scene_doc), background=false, zorder=6, bgroundedge=10, onclick=get(temp));

			addlayer(calc(get(scene_name) + 'text_mobile'));
			set(layer[calc(get(scene_name)+'text_mobile')],parent= calc(get(scene_name)+'mobile'),width=150, state='normal', type='text', align='bottomcenter',  keep=true, doc=get(scene_doc), html=get(scene_title), background=false, zorder=6, css='color:#ffffff; font-size:15px; text-align:center; padding-left:10px;');

		);
		set(layer[menu_box_mobile_title_track].width, calc(items.count*180+40));
	</action>

	<action name="close_menu_box_mobile">
		set(layer[menu_box_mobile].visible,false);
	</action>

	<action name="do_cover_image">
		if(device.mobile or device.tablet,
			set(layer[btn_voice].width,80); set(layer[btn_voice].height,80); set(layer[btn_voice].y,28);
			set(layer[icon_voice].width,80); set(layer[icon_voice].height,80);
			set(layer[icon_voice_off].width,80); set(layer[icon_voice_off].height,80);
			set(layer[btn_info_circle].x,100); set(layer[btn_info_circle].y,90); set(layer[btn_info_circle].height,25); set(layer[btn_info_circle].width,25);
			set(layer[bgm_progress].height,10); set(layer[bgm_progress].y,14); set(layer[bgm_progress].width,80);
			set(layer[bgm_progress_fill].height,10);
			set(layer[somecontent].css,'color:white; font-size:1rem; text-align:justify; line-height: 1.2; font-family: Arial, sans-serif; padding: 10px;');
			set(layer[skin_title_mobile].visible,true);
			set(layer[skin_title].visible,false);
			set(layer[icon_switch_scene].align,center); set(layer[icon_switch_scene].scale,1.2); set(layer[icon_switch_scene].y,-40); set(layer[icon_switch_scene].width,40%);
			set(layer[menu_box].visible,false);
			set(layer[icon_gogogo_off].visible,false);set(layer[icon_gogogo].visible,true);
			set(layer[icon_gogogo],width=80,height=80); 
			set(layer[btn_gogogo],width=80,height=80,x=60,y=30); 
			set(layer[icon_goback],width=50,height=50); 
			set(layer[btn_goback],width=50,height=50,x=0,y=0);
			set(layer[text_go_next],x=0,y=100);
			,
			set(layer[skin_title_mobile].visible,false);
			set(layer[skin_title].visible,true);
		)
	</action>
<events name="cover_events"
        keep="true"
        onloadcomplete="do_cover_image();" />

<!-- <layer name="cover"
       type="container"
       keep="true"
       visible="true"
       align="center"
       width="100%" height="100%"
	   bg="true" 
       bgcolor="0x000000" bgalpha="0.5"
       zorder="100000"
       bgcapture="false" handcursor="false"
	   ondown="set(layer[cover].visible,false);
            set(control.usercontrol, all);         
			set(layer[icon_voice].visible, true);
			set(layer[icon_voice_off].visible, false);
			js(playAudio(get(scene[get(xml.scene)].doc),'on'));
			js(playIntro(get(scene[get(xml.scene)].doc),'on'));
         "
	   > -->

  <!-- <layer name="cover_img"
         url="banner.png"           
         align="center"
         width="100%" height="100%"
         bgcapture="false"
		 handcursor="false"	
		  onloaded="delayedcall(5, close_cover_layer());"
		 />
	<layer name="cover_img_mobile"
         url="banner_mobile.png"           
         align="center"
         width="100%" height="100%"
         bgcapture="false"
		 handcursor="false"	
		 visible="false"
		 />


	 <layer name="btn_explore"
         type="container"
         align="center" y="40%"      
         width="170" height="50"
         bgcolor="0xFFFFFF" bgalpha="0.8"
         bgroundedge="15"
         handcursor="true"
        >

		<layer name="btn_explore_text"
         type="text"
         align="center"       
         width="170" height="50"
		 x="-10"
         roundedge="10"
		 bgcolor="0x000000" bgalpha="0.0"
         css="color:#010ed1; font-size:20px; font-weight:bold; text-align:center; line-height:50px; font-family: Arial, sans-serif;"
         html="Bắt Đầu"
		  onclick="set(layer[cover].visible,false);
                  set(control.usercontrol, all);         
                  set(layer[icon_voice].visible, true);
                  set(layer[icon_voice_off].visible, false);
                  js(playAudio(get(scene[get(xml.scene)].doc),'on'));
                  js(playIntro(get(scene[get(xml.scene)].doc),'on'));
				  set(skin_settings.autotour, true);
				  autorotate.start();
				  set(idle_enabled, true);
				  delayedcall(idleswitch, 20, skin_nextscene_loop(+1); );
                 " 
         />
		 <layer name="btn_explore_icon"
         type="image"
         align="center"       
         width="50" height="50"
		 x="60"
		 bgcolor="0x000000" bgalpha="0.0"
		 url="icons/playred.png"
		 onclick="set(layer[cover].visible,false);
                  set(control.usercontrol, all);         
                  set(layer[icon_voice].visible, true);
                  set(layer[icon_voice_off].visible, false);
                  js(playAudio(get(scene[get(xml.scene)].doc),'on'));
                  js(playIntro(get(scene[get(xml.scene)].doc),'on'));
				  set(skin_settings.autotour, true);
				  autorotate.start();
				  set(idle_enabled, true);
				  delayedcall(idleswitch, 20, skin_nextscene(+1); );
                 " 
         />
		</layer>
</layer> -->

<events name="ev_idle" keep="true"
  onnewpano="if(idle_enabled, restart_idle());"
  onmouseup="if(idle_enabled, restart_idle());"
  onmousewheel="if(idle_enabled, restart_idle());"
  onkeydown="if(idle_enabled, restart_idle());" />

<action name="restart_idle">
  stopdelayedcall(idleswitch);
  delayedcall(idleswitch, 20, skin_nextscene(+1); );
</action>

<events name="ev_last_img" keep="true"
  onnewpano="last_img_check();"
   />

<action name="last_img_check">
   if(scene[get(xml.scene)].index == scene.count - 1,
		set(layer[text_finish].visible,true);
		set(temp, calc('show_info_last_img();'));
		set(layer[skin_next_btn].onclick,get(temp));
        ,
		set(layer[text_finish].visible,false);
		set(temp, calc('if(skin_settings.thumbs_loop, skin_nextscene_loop(+1), skin_nextscene(+1) );'));
		set(layer[skin_next_btn].onclick,get(temp));
		tween(layer[box_last_img].alpha, 0, 0.5, default, set(layer[box_last_img].visible, false));
    );
</action>

	<!-- skin layout -->
	<layer name="skin_layer" keep="true" type="container" align="top" width="get:skin_settings.layout_width" maxwidth="100%" height="100%" maskchildren="true" visible="false" bgcapture="false" zorder="1">
		<layer name="skin_scroll_window" type="container" align="left" width="100%" height="100%" x="0" y="calc:skin_settings.controlbar_offset + skin_settings.controlbar_height - skin_settings.controlbar_overlap" maskchildren="true" onloaded="skin_calc_opened_closed();" zorder="1" bgroundedge.firefox="1">
			<layer name="skin_scroll_layer" type="container" align="bottom" width="40%" height="60%" x="0" y="200" y_offset="get:skin_settings.controlbar_overlap" accuracy="1" bgalpha="get:skin_settings.design_bgalpha" bgcolor="get:skin_settings.design_bgcolor" bgborder="get:skin_settings.design_bgborder" bgroundedge="get:skin_settings.design_bgroundedge" bgshadow="get:skin_settings.design_bgshadow">
				<layer name="skin_video_controls" type="container" align="lefttop" edge="leftbottom" width="100%" height="18" visible="false">
					<layer name="skin_video_seekbar_container" type="container" align="lefttop" width="100%" height="100%" bgcapture="true" ondown="skin_video_ondownseeking();" >
						<layer name="skin_video_seekbar" type="container" bgcolor="0xFFFFFF" bgalpha="0.25" align="center" width="100%" height="2">
							<layer name="skin_video_loadbar" type="container" bgcolor="0xFFFFFF" bgalpha="0.5" align="left" width="0" height="2" />
							<layer name="skin_video_seekpos" type="container" bgcolor="0xFFFFFF" bgalpha="1.0" align="left" edge="center" x="0" bgroundedge="8" width="10" height="10" />
						</layer>
					</layer>
					<layer name="skin_video_time" type="text" align="rightbottom" x="4" enabled="false" bg="false" css="calc:skin_settings.design_text_css + ' text-align:left; font-style:italic; font-size:12px;'" txtshadow="get:skin_settings.design_text_txtshadow" html="0:00 / 0:00" />
				</layer>
				<layer name="skin_scroll_container" type="container" align="lefttop" width="100%" height="100%" x="0" y="0" bgroundedge="get:skin_settings.design_bgroundedge" maskchildren="true">
					<layer name="skin_thumbs_container" type="container" align="lefttop" width="100%" height="100%" visible="false">
						<layer name="skin_thumbs_scrollleft"  style="skin_base|skin_glow" crop="0|64|64|64"  align="lefttop"  edge="left"  x="5" y="50" scale="0.5" zorder="2" alpha="1.0" ondown="asyncloop(pressed, layer[skin_thumbs].scrollby(+2,0));" visible="false" />
						<layer name="skin_thumbs_scrollright" style="skin_base|skin_glow" crop="64|64|64|64" align="righttop" edge="right" x="5" y="50" scale="0.5" zorder="2" alpha="1.0" ondown="asyncloop(pressed, layer[skin_thumbs].scrollby(-2,0));" visible="false" />
						<layer name="skin_thumbs_scrollindicator" type="container" bgcolor="0xFFFFFF" bgalpha="0.25" align="lefttop" width="0" y="100" height="2" visible="false" enabled="false" />
						<layer name="skin_thumbs" state="closed" type="scrollarea" direction="h" align="top" width="100%" height="100" zorder="1" onloaded="skin_updatethumbsview(false);" onscroll="skin_updatethumbscroll();" />
					</layer>
				</layer>
			</layer>
			
		</layer>
		<layer name="skin_map_layer" style="map_hover" type="container" visible="false" align="leftbottom" width="25%" alpha="0.7" height="45%" x="0" y="110" y_offset="get:skin_settings.controlbar_overlap" accuracy="1" bgalpha="get:skin_settings.design_bgalpha" bgcolor="get:skin_settings.design_bgcolor" bgborder="get:skin_settings.design_bgborder" bgroundedge="get:skin_settings.design_bgroundedge" bgshadow="get:skin_settings.design_bgshadow" maskchildren="true"> 
				<layer name="button_close" url="icons/close.png" align="righttop" x="0" y="0"	width="36" height="36"	handcursor="true" onclick="skin_showmap(false);" zorder="3"/>
				<layer name="skin_map_container" type="container" align="rightbottom"  width="100%" height="100%" bgroundedge="get:skin_settings.design_bgroundedge" 	>
					<!-- <layer name="skin_map" type="container" scale="1" url="" visible="false" align="center" width="100%" height="100%" x="0" y="0" zorder="1" alpha="0.05" cursor="default" onmapready="skin_addcustommapspots_around();">
						<layer name="location_container" type="container" visible="true" width="10%" height="10%"  zorder="2"  onmapready="skin_addcustommapspots();"> -->
							<!-- <plugin name="radar"  url.html5="../plugins/radar_source.js" x="-50" y="-50" scale="0.5" heading="0.0" headingoffset="90.0" fillcolor="0x45bfe3" fillalpha="0.5" linewidth="0.0" linecolor="0xFFFFFF" linealpha="0.3" invert="false" cursor="default"/> -->
						<!-- </layer>
					</layer> -->
					<layer name="skin_map" style="krpanomaps" state="closed" url="" visible="false" align="lefttop" width="100%" height="50%" x="0" y="0" zorder="1" lat="21.0285" lng="105.8542" zoom="20.0" bgalpha="0" maptype="satellite" zoombase="screen" onmapready="skin_addmapspots();">
							<maptypecontrol visible="true" align="righttop" x="5" y="5" buttonalign="v" scale.mobile="1.5" />
							<radar visible="false" headingoffset="0" />
							<spotstyle name="DEFAULT" url="vtourskin_mapspot.png" activeurl="vtourskin_mapspotactive.png" edge="bottom" x="-5" y="-8" scale="0.5" />
							<layer name="skin_map_zoom_in"  style="skin_base" visible="get:skin_settings.maps_zoombuttons" crop="9|512|46|64"  align="right" x="0" y="-40" zorder="2" ondown="layer[skin_map].zoomin();  skin_buttonglow(get(name));" onup="skin_buttonglow(null);" />
							<layer name="skin_map_zoom_out" style="skin_base" visible="get:skin_settings.maps_zoombuttons" crop="73|512|46|64" align="right" x="0" y="+40" zorder="2" ondown="layer[skin_map].zoomout(); skin_buttonglow(get(name));" onup="skin_buttonglow(null);" />
						</layer>
				</layer>
			</layer>
		<!-- <layer name="skin_splitter_bottom" type="container" align="topleft" width="calc:skin_settings.controlbar_offset + skin_settings.controlbar_height - skin_settings.controlbar_overlap" height="96%" x="10" y="0" maskchildren="true" onloaded="skin_calc_opened_closed();" zorder="2">
			<layer name="skin_control_bar_bg" type="container" align="topleft" width="calc:skin_settings.controlbar_height" height="96%" x="0" y="get:skin_settings.controlbar_offset" bgcolor="get:skin_settings.design_bgcolor" bgalpha="get:skin_settings.design_bgalpha" bgborder="get:skin_settings.design_bgborder" bgroundedge="get:skin_settings.design_bgroundedge" bgshadow="get:skin_settings.design_bgshadow" />
		</layer> -->

		<layer name="box" type="container" align="top" x="0" y="20" width.normal="700" width.mobile="80%" height="80%" bgcolor="0x5c64af" bgalpha="1" bgborder="1 0x777777 0.5" bgroundedge="7" bgshadow="0 4 20 0x000000 0.25" visible="false">
			<layer name="box_title" y="0" type="text" align="top" width="100%" height="50" bgalpha="1.0" zorder="2" bgcolor="0x5c64af" bgborder="0">
				<layer name="content" type="text" html="Thông tin địa điểm" align="center" x="0" width="100%" height="20" css="color:white; font-size:18px; text-align:center; text-transform: uppercase" bgalpha="0.0" zorder="2"/>
			</layer>
			<layer name="close_button"
				url="icons/close.png"
				align="righttop"
				x="0" y="5"
				width="36" height="36"
				handcursor="true"
				onclick="show_info();"
				zorder="2"
			/>
			<layer name="scrollarea"
				type="scrollarea"
				width="-10" flowchildren="v" childmargin="50 0 10 10"
				scrolltype.desktop="smooth"
				scrolltype.tablet.or.mobile="inertia"
				direction="v"
				draggable="true"
				mwheel="true"
				capturechildren="true"
				autoscrollbars="null,vscrollbar_grip,10"
				onhover_autoscrolling="false"
				onscroll=""
				onoverflowchange=""
				>
				<layer name="somecontent" type="text" align="lefttop" html="get:data[test].content" htmlautosize="true" width="100%" bgalpha="0.0" css="color:white; font-size:1.5rem; text-align:justify; line-height: 1.5; font-family: Arial, sans-serif; padding: 10px;"
					/>
			</layer>
			<layer name="vscrollbar_bg" type="container" align="right" width="16" height="100%">
			<layer name="vscrollbar_grip" type="container" align="righttop" width="8" x="4" height="16" bgcolor="0xAAAAAA" bgalpha="0.5" bgroundedge="7" bgcapture="true" />
		</layer>
		</layer>

		<layer name="skin_control_bar" type="container" align="rightbottom" width="36" height="342" x="5" y="0" onloaded="skin_calc_opened_closed();" zorder="3" bgcapture="true" bgroundedge="7">
			<layer name="skin_control_bar_buttons" type="container" align="topleft" width="110" height="96%">
				<!-- PREV -->
				<layer name="skin_btn_prev" style="skin_hover" type="container" visible="false" x="0" y="0" width="36" height="36" background="true" bgcolor="0x6278a1" bgalpha="1" bgcapture="true" onclick="go_back();" bgroundedge="20">
					<layer name="icon_prev" capture="false" style="skin_tooltips" tooltip="Trở lại ảnh trước" url="icons/prev.png" align="center" x="0" y="0" width="36" height="100%" scale="0.5	" />

				</layer>

				<!-- TOÀN CẢNH -->
				<layer name="btn_view" type="container" style="skin_hover" visible="false" x="" y="38" width="36" height="36" onclick="start_vr();" background="true" bgcolor="0x6278a1" bgalpha="1" bgcapture="true" bgroundedge="20">
					<layer name="icon_view" capture="false" style="skin_tooltips" tooltip="Tổng quan địa điểm" type="text"  url="icons/view.png" align="center" x="0" y="0" width="36" height="100%" scale="0.7"/>
				</layer>

				<layer name="btn_menu" type="container" style="skin_hover" visible="false" x="" y="76" width="36" height="36" background="true"  bgcolor="0x6278a1" bgalpha="1" bgcapture="true" ondown="skin_showmap(false); skin_showthumbs();" bgroundedge="20">
					<layer name="icon_menu" capture="false" style="skin_tooltips" tooltip="Album ảnh" url="icons/menu.png" align="center" x="0" y="0" width="36" height="100%" scale="0.7" origin="center" />
				</layer>

				<layer name="btn_360" type="container" style="skin_hover" visible="false" x="" y="114" width="36" height="36" background="true"  bgcolor="0x6278a1" bgalpha="1" bgcapture="true" onclick="view_360_action();" bgroundedge="20">
					<layer name="icon_360" capture="false" style="skin_tooltips" tooltip="Toàn cảnh" url="icons/360.png" align="center" x="0" y="0" width="36" height="100%" scale="0.7" origin="center"/>
				</layer>

				<layer name="btn_vr" type="container" style="skin_hover" visible="false" x="" y="152" width="36" height="36" background="true"  bgcolor="0x6278a1" bgalpha="1" bgcapture="true" onclick=" webvr.enterVR();" bgroundedge="20">
					<layer name="icon_vr" capture="false" style="skin_tooltips" tooltip="Thực tế ảo" url="icons/vr.png" align="center" x="0" y="0" width="36" height="100%" scale="0.7" origin="center"/>
				</layer>
				<layer name="btn_camera" type="container" style="skin_hover" visible="false" x="" y="190" width="36" height="36" background="true"  bgcolor="0x6278a1" bgalpha="1" bgcapture="true"  bgroundedge="20" onclick="shot_without_ui();">
					<layer name="icon_camera" capture="false" style="skin_tooltips" tooltip="Chụp hình" url="icons/camera.svg" align="center" x="0" y="0" width="36" height="100%" scale="0.7" origin="center"/>
				</layer>
				<layer name="btn_rotate" type="container" style="skin_hover" visible="false" x="" y="228" width="36" height="36" background="true"  bgcolor="0x6278a1" bgalpha="1" bgcapture="true" onclick="toggle_rotate();" bgroundedge="20">
					<layer name="icon_rotate_off" capture="false" style="skin_tooltips" tooltip="Bật/Tắt tự xoay" url="icons/rotate_off.svg" visible="false" align="center" x="0" y="0" width="36" height="100%" scale="1" origin="center"/>
					<layer name="icon_rotate" capture="false" style="skin_tooltips" tooltip="Bật/Tắt tự xoay" url="icons/rotate.svg" align="center" x="0" y="0" width="36" height="100%" scale="1" origin="center"/>
				</layer>
				<layer name="btn_zoom" type="container" style="skin_hover" visible="false" x="" y="266" width="36" height="36" background="true"  bgcolor="0x6278a1" bgalpha="1" bgcapture="true"  bgroundedge="20" onclick="toggle_fullscene();">
					<layer name="icon_zoom_out" capture="false" style="skin_tooltips" tooltip="Bật/Tắt toàn màn hình" url="icons/zoom_out_ico.svg" visible="false" align="center" x="0" y="0" width="36" height="100%" scale="0.7" origin="center"/>
					<layer name="icon_zoom_in" capture="false" style="skin_tooltips" tooltip="Bật/Tắt toàn màn hình" url="icons/zoom_in_ico.svg" align="center" x="0" y="0" width="36" height="100%" scale="0.7" origin="center"/>
				</layer>
				<layer name="btn_hide" type="container" style="skin_hover" x="" y="304" width="36" height="36" background="true"  bgcolor="0x6278a1" bgalpha="1" bgcapture="true" onclick="toggle_menu()" bgroundedge="20">
					<layer name="icon_hide" capture="false" style="skin_tooltips" tooltip="Ẩn/Hiện Menu" url="icons/setting_ico.svg" align="center" x="0" y="0" width="36" height="100%" scale="0.7" origin="center"/>
				</layer>
				<!-- NEXT -->
				<!-- <layer name="skin_btn_next" type="container" horizontal="center" align="right" width="24" height="24">
					<layer name="icon_next" style="skin_base|skin_glow" url="icons/next.png" x="center" y="0" width="48" height="48" scale="0.5" onclick="if(skin_settings.thumbs_loop, skin_nextscene_loop(+1), skin_nextscene(+1) );"/>
				</layer> -->
				<!-- <layer name="skin_btn_prev"      style="skin_base|skin_glow" crop="0|64|64|64"   origin="center"        x="10%"    y="0"  scale="0.5" alpha="0.5"  onclick="if(skin_settings.thumbs_loop, skin_nextscene_loop(-1), skin_nextscene(-1) );" />
				<layer name="skin_btn_thumbs"    style="skin_base|skin_glow" crop="0|128|64|64"  origin="center"        x="20%"   y="0"  scale="0.5" ondown="skin_showmap(false); skin_showthumbs();" />
				<layer name="skin_btn_map"       style="skin_base|skin_glow" crop="64|128|64|64" origin="center"        x="30%"   y="0"  scale="0.5" ondown="skin_showthumbs(false); skin_showmap();" visible="false" />
				<layer name="skin_btn_navi" type="container" origin="center" x="40%" width="240" height="32">
					<layer name="skin_btn_left"  style="skin_base|skin_glow" crop="0|192|64|64"  origin="center"      x="40%" y="0"  scale="0.5" ondown="set(hlookat_moveforce,-1);" onup="set(hlookat_moveforce,0);" />
					<layer name="skin_btn_right" style="skin_base|skin_glow" crop="64|192|64|64" origin="center"      x="50%"  y="0"  scale="0.5" ondown="set(hlookat_moveforce,+1);" onup="set(hlookat_moveforce,0);" />
					<layer name="skin_btn_up"    style="skin_base|skin_glow" crop="0|256|64|64"  origin="center"      x="60%"  y="0"  scale="0.5" ondown="set(vlookat_moveforce,-1);" onup="set(vlookat_moveforce,0);" />
					<layer name="skin_btn_down"  style="skin_base|skin_glow" crop="64|256|64|64" origin="center"      x="70%"  y="0"  scale="0.5" ondown="set(vlookat_moveforce,+1);" onup="set(vlookat_moveforce,0);" />
					<layer name="skin_btn_in"    style="skin_base|skin_glow" crop="0|320|64|64"  origin="center"      x="80%"  y="0"  scale="0.5" ondown="set(fov_moveforce,-1);"     onup="set(fov_moveforce,0);" />
					<layer name="skin_btn_out"   style="skin_base|skin_glow" crop="64|320|64|64" origin="center"      x="90%" y="0"  scale="0.5" ondown="set(fov_moveforce,+1);"     onup="set(fov_moveforce,0);" />
				</layer>
				<layer name="skin_btn_gyro"      style="skin_base|skin_glow" crop="0|384|64|64"  origin="center"      x="100%" y="0"  scale="0.5" onclick="switch(plugin[skin_gyro].enabled); if(plugin[skin_gyro].enabled, skin_showmap(false));" visible="false" />
				<layer name="skin_btn_vr"        style="skin_base|skin_glow" crop="0|0|80|64"    origin="center"      x="+146" y="0"  scale="0.5" onclick="webvr.enterVR();" visible="false" />
				<layer name="skin_btn_fs"        style="skin_base|skin_glow" crop="0|576|64|64"  origin="center"       x="90"   y="0"  scale="0.5" onclick="switch(fullscreen);" devices="fullscreensupport" />
				<layer name="skin_btn_hide"      style="skin_base|skin_glow" crop="0|448|64|64"  origin="center"       x="50"   y="0"  scale="0.5" onclick="skin_hideskin()" />
				<layer name="skin_btn_show" type="container" bgcapture="true" align="bottom" width="100%" height="get:skin_settings.controlbar_height" y="calc:skin_settings.controlbar_height - skin_settings.controlbar_offset_closed" onclick="skin_showskin()" onhover="tween(alpha,1.0);" onout="tween(alpha,0.25);" ondown.touch="onhover();" onup.touch="onout();" visible="false" capture="false" alpha="0.0">
					<layer name="skin_btn_show_icon" style="skin_base" crop="64|448|64|64" scale="0.5" align="bottom" y="2" enabled="false" />
				</layer>
				<layer name="skin_btn_next"      style="skin_base|skin_glow" crop="64|64|64|64"  origin="center"       x="90%"    y="0"   scale="0.5" alpha="0.5"  onclick="if(skin_settings.thumbs_loop, skin_nextscene_loop(+1), skin_nextscene(+1) );" /> -->
			</layer>
		</layer>

				<layer name="btn_voice" type="container" align="rightbottom" x="43" y="38" width="144" height="144"  bgcapture="true" onclick="toggle_audio();" bgroundedge="70"  maskchildren="true">
					<layer name="icon_voice" capture="false" style="skin_tooltips" tooltip="Bật/Tắt thuyết minh" visible="false" url="icons/voice.webp" align="center" x="0" y="0" width="144" height="144" scale="1" origin="center" />
					<layer name="icon_voice_off" capture="false" style="skin_tooltips" tooltip="Bật/Tắt thuyết minh"  url="icons/voice.png" align="center" x="0" y="0" width="144" height="144" scale="1" origin="center" />
				</layer>

				<layer name="btn_info_circle" type="container" style="skin_hover" align="rightbottom" x="144" y="144" width="36" height="36" background="true"  bgcolor="0x6278a1" bgalpha="1" bgcapture="true" onclick="show_info();" bgroundedge="20">
					<layer name="icon_info_circle" capture="false" style="skin_tooltips" tooltip="Thông tin địa điểm" url="icons/infoico.svg" align="center" x="0" y="0" width="36" height="100%" scale="0.7" origin="center" />
				</layer>

				<layer name="btn_map" type="container" align="lefttbottom" x="" y="60" width="50" height="50"  onover="set(layer[icon_map_off].visible, false); set(layer[icon_map].visible, true);" onout="set(layer[icon_map_off].visible, true); set(layer[icon_map].visible, false);">
					<layer name="icon_map_off" capture="false" style="skin_tooltips_left" tooltip="Bật/Tắt bản đồ" url="icons/iconmap_off.svg" align="center" x="0" y="0" width="50" height="100%" scale="1" origin="center" onclick="set(layer[skin_map_layer].visible,true); skin_showthumbs(false); skin_showmap(); "/>
					<layer name="icon_map" capture="false" style="skin_tooltips_left" tooltip="Bật/Tắt bản đồ" visible="false" url="icons/iconmap.svg" align="center" x="0" y="0" width="50" height="100%" scale="1" origin="center" onclick="set(layer[skin_map_layer].visible,true); skin_showthumbs(false); skin_showmap(); " />
				</layer>
				<layer name="text_gogogo" capture="false" align="righttop" x="0" y="0" type="text" html="Tour tiếp theo: Tham quan Đảo &amp; Ngoại ô" width="220" height="144" scale="1" bgalpha="0" origin="center" css="calc:skin_settings.design_text_css + ' text-align:center; font-size:16px; font-weight:bold; font-style:italic;'" txtshadow="get:skin_settings.design_text_txtshadow"/>
				<layer name="text_go_next" capture="false" align="righttop" x="0" y="144" type="text" html="Nhấn để chuyển tour!" width="220" height="144" scale="1" bgalpha="0" origin="center" css="calc:skin_settings.design_text_css + ' text-align:center; text-decoration:underline ;font-size:16px; font-weight:bold; font-style:italic; '" txtshadow="get:skin_settings.design_text_txtshadow"/>
				<layer name="btn_gogogo" type="container" align="righttop" x="20" y="18" width="144" height="144"  bgcapture="true" onclick="js(openHref('http://vh360.com.vn/nha-trang/nha-trang-2/', '_self'));" bgroundedge="70"  maskchildren="true">
					<layer name="icon_gogogo" capture="false" style="skin_tooltips" url="icons/gogogo.gif" align="center" x="0" y="0" width="144" height="144" scale="1" origin="center"/>
				</layer>
				<layer name="text_finish" capture="false" align="top" x="0" y="50" type="text" html="Chúc mừng bạn đã hoàn thành tour! Nhấn để tiếp tục hành trình mới" visible="false" width="220" height="144" scale="1" bgalpha="0" origin="center" css="calc:skin_settings.design_text_css + ' text-align:center; font-size:16px; font-weight:bold; font-style:italic; color:0xff0000;'" txtshadow="get:skin_settings.design_text_txtshadow" onclick="js(openHref('http://vh360.com.vn/nha-trang/nha-trang-2/', '_self'));"/>
				<layer name="box_last_img" type="container" align="top" x="0" y="20" width.normal="700" width.mobile="80%" height="80%" bgcolor="0x5c64af" bgalpha="1" bgborder="1 0x777777 0.5" bgroundedge="7" bgshadow="0 4 20 0x000000 0.25" visible="false">
					<layer name="box_title_last_img" y="0" type="text" align="top" width="100%" height="50" bgalpha="1.0" zorder="2" bgcolor="0x5c64af" bgborder="0">
						<layer name="content_last_img" type="text" html="Chúc mừng bạn đã hoàn thành Tour!" align="center" x="0" width="100%" height="20" css="color:white; font-size:18px; text-align:center; text-transform: uppercase" bgalpha="0.0" zorder="2"/>
						</layer>
						<layer name="close_button_last_img"
								url="icons/close.png"
								align="righttop"
								x="0" y="5"
								width="36" height="36"
								handcursor="true"
								onclick="show_info_last_img();"
								zorder="2"
						/>
						<layer name="scrollarea_last_img"
								type="scrollarea"
								width="-10" flowchildren="v" childmargin="50 0 10 10"
								scrolltype.desktop="smooth"
								scrolltype.tablet.or.mobile="inertia"
								direction="v"
								draggable="true"
								mwheel="true"
								capturechildren="true"
								autoscrollbars="null,vscrollbar_grip,10"
								onhover_autoscrolling="false"
								onscroll=""
								onoverflowchange=""
						>
						<layer name="content_text_last_img" type="text" align="lefttop" html="get:data[next-tour].content" htmlautosize="true" width="100%" bgalpha="0.0" css="color:white; font-size:1.5rem; text-align:justify; line-height: 1.5; font-family: Arial, sans-serif; padding: 10px;"/>
					</layer>
					<layer name="btn_explore_text"
						type="text"
						align="bottom"       
						width="170" height="50"
						x="-150" y="10"
						roundedge="10"
						bgcolor="0x0e81af" bgalpha="1.0"
						css="color:#010ed1; font-size:20px; font-weight:bold; text-align:center; line-height:50px; font-family: Arial, sans-serif;"
						html="Lên Đường Thôi!"
						onclick="js(openHref('http://vh360.com.vn/nha-trang/nha-trang-2/', '_self'));"
					/>
					<layer name="btn_stop_text"
						type="text"
						align="bottom"       
						width="170" height="50"
						x="150" y="10"
						roundedge="10"
						bgcolor="0x0e81af" bgalpha="1.0"
						css="color:#010ed1; font-size:20px; font-weight:bold; text-align:center; line-height:50px; font-family: Arial, sans-serif;"
						html="Trở Lại"
						onclick="if(skin_settings.thumbs_loop, skin_nextscene_loop(+1), skin_nextscene(+1) ); show_info_last_img();"
					/>
					<layer name="vscrollbar_bg_last_img" type="container" align="right" width="16" height="100%">
						<layer name="vscrollbar_grip_last_img" type="container" align="righttop" width="8" x="4" height="16" bgcolor="0xAAAAAA" bgalpha="0.5" bgroundedge="7" bgcapture="true" />
					</layer>
				</layer>
				<layer name="text_goback" capture="false" align="lefttop" x="0" y="0" type="text" visible="false"  html="Về Trang Chính" width="140" height="144" scale="1" bgalpha="0" origin="center" css="calc:skin_settings.design_text_css + ' text-align:center; font-size:16px; font-weight:bold; font-style:italic;'" txtshadow="get:skin_settings.design_text_txtshadow"/>
				<layer name="btn_goback" type="container" align="lefttop" x="20" y="18" width="100" height="100"  bgcapture="true" onclick="js(openHref('http://vh360.com.vn/nha-trang/', '_self'));" bgroundedge="70"  maskchildren="true">
					<layer name="icon_goback" capture="false" style="skin_tooltips_left" tooltip="Trang Chủ" visible="true"  url="icons/logo-nhatrang.png" align="center" x="0" y="0" width="100" height="100" scale="1" origin="center" onover="set(layer[text_goback].visible,true);" onout="set(layer[text_goback].visible,false);"/>
				</layer>
		<layer name="skin_loadingtext" type="text" align="center" x="5" y="-5" html="get:skin_settings.loadingtext" visible="false" bg="false" enabled="false" css="calc:skin_settings.design_text_css + ' text-align:center; font-style:italic; font-size:22px;'" txtshadow="get:skin_settings.design_text_txtshadow" />
		<layer name="skin_buttonglow"  style="skin_base" crop="64|384|64|64" align="center" x="0" y="1" scale="1.0" alpha="0.0" visible="false" enabled="false" />
		<layer name="btn_next_scene" type="container" align="right" width="230" height="9%" x="10" y="-100" onclick="if(skin_settings.thumbs_loop, skin_nextscene_loop(+1), skin_nextscene(+1) );" background="true" bgcolor="0x000000" bgalpha="0.5" bgcapture="true" bgroundedge="10">
			<layer name="icon_next_scene" capture="false" type="text" align="rightcenter"  url="icons/right-arrow.png" width="60" height="60" scale="0.7"/>
			<layer name="text_next_scene" capture="false" type="text" align="leftcenter" html="" width="80%" height="18" bg="false"
				css="text-align:center; font-size:16px; color:#FFFFFF; font-family:sans-serif; background:none" />
		</layer>
		<layer name="btn_prev_container" type="container" align="bottom" width="28%" height="15%" x="-10">
			<layer name="icon_switch_scene" capture="false" type="container" align="leftcenter" width="20%" height="100%" scale="0.7">
				<layer name="skin_next_btn"  style="skin_base" url="icons/up-arrow.png" align="top" scale="1.0" visible="true" enabled="true" width="100%" height="60%" onclick="if(skin_settings.thumbs_loop, skin_nextscene_loop(+1), skin_nextscene(+1) );"/>
				<layer name="skin_prev_btn"  style="skin_base" url="icons/down-arrow.png" align="bottom" scale="1.0" visible="true" enabled="true" width="80%" height="40%" onclick="go_back();"/>
			</layer>
			<layer name="skin_title" type="text" zorder="0" x="30%" align="left" width="80%" enabled="false" bg="false" css="calc:skin_settings.design_text_css + ' text-align:left; font-style:italic; font-size:18px; word-wrap: break-word; white-space: normal;'" txtshadow="get:skin_settings.design_text_txtshadow" visible="false" onautosized="skin_video_updateseekbarwidth();" />
		</layer>
		<layer name="skin_title_mobile" visible="false" type="text" zorder="0" x="0" align="leftbottom" width="65%" bg="true" bgalpha="0.7" bgcolor="0x676087c2" css="calc:skin_settings.design_text_css + ' text-align:left; font-style:italic; font-size:18px; word-wrap: break-word; white-space: normal;'" txtshadow="get:skin_settings.design_text_txtshadow" onautosized="skin_video_updateseekbarwidth();" enabled="true" onclick="set(layer[menu_box_mobile].visible,true); build_thumb_mobile(get(scene[get(xml.scene)].doc))">
			<layer name="skin_title_mobile_show"  style="skin_base" url="icons/up-arrow-menu.png" align="right" scale="1.0" visible="true" enabled="true" width="20" height="20" onclick="set(layer[menu_box_mobile].visible,true); build_thumb_mobile(get(scene[get(xml.scene)].doc))"/>
		</layer>
		<layer name="skin_thumbborder" type="container" x="get:skin_settings.design_thumbborder_padding" y="get:skin_settings.design_thumbborder_padding" width="calc:skin_settings.thumbs_width - 2*skin_settings.design_thumbborder_padding" height="calc:skin_settings.thumbs_height - 2*skin_settings.design_thumbborder_padding" visible="false" enabled="false" align="lefttop" bgborder="get:skin_settings.design_thumbborder_bgborder" bgroundedge="get:skin_settings.design_thumbborder_bgroundedge" />
	</layer>

	

	<!-- previous/next scene buttons for the hidden skin mode -->
	<layer name="skin_btn_prev_fs" keep="true" type="container" align="lefttop"  x="-50" width="40" height="100%" bgcapture="true" alpha="0.0" enabled="false" capture="false" zorder="2" onclick="skin_nextscene_loop(-1);" onhover="tween(alpha,1.0);" onout="tween(alpha,0.25);" ondown.touch="onhover();" onup.touch="onout();">
		<layer name="skin_btn_prev_fs_icon" style="skin_base" crop="0|64|64|64"  align="center" scale="0.5" enabled="false" />
	</layer>
	<layer name="skin_btn_show_menu" keep="true" type="container" align="left"  x="-50" width="40" height="10%" bgcapture="true" alpha="0.0" enabled="false" capture="false" zorder="2" onout="tween(alpha,0.75);" ondown.touch="onhover();" onup.touch="onout();">
		<layer name="skin_btn_show_menuicon" style="skin_base" crop="64|64|64|64"  align="center" scale="0.5" enabled="true" onhover="skin_showskin" onclick="skin_showskin;"/>
	</layer>
	<layer name="skin_btn_next_fs" keep="true" type="container" align="righttop" x="-50" width="40" height="100%" bgcapture="true" alpha="0.0" enabled="false" capture="false" zorder="2" onclick="skin_nextscene_loop(+1);" onhover="tween(alpha,1.0);" onout="tween(alpha,0.25);" ondown.touch="onhover();" onup.touch="onout();">
		<layer name="skin_btn_next_fs_icon" style="skin_base" crop="64|64|64|64" align="center" scale="0.5" enabled="false" />
	</layer>
	<!-- Progress UI -->
	<layer name="bgm_progress" type="container" keep="true"
		align="righttbottom" x="43" y="18" width="144" height="20"
		background="true" bgalpha="0.25" bgcolor="0x000000"  bgroundedge="8"
			zorder="1" visible="true" maskchildren="true">
	<layer name="bgm_progress_fill" type="container" visible="true"  keep="true"
		align="left" edge="left" x="0" y="0" width="calc:1.44*get(bgm_progress_percent)" height="20"
		background="true" bgalpha="1.0"  bgcolor="0x55CCFF" bgroundedge="8" zorder="2"
		/>
	</layer>

	<textstyle name="menu_tooltip"
           parent="DEFAULT"
           background="true" border="true" roundedge="8"
           padding="6 10" fontsize="14" bold="true"
           edge="left" textalign="center" />

	<!-- VR support - https://krpano.com/plugins/webvr/ -->
	<include url="%VIEWER%/plugins/webvr.xml" />
	
	<!-- overwrite some settings from the webvr.xml for the skin integration -->
	<plugin name="webvr" keep="true" devices="webgl"
	        url="calc:skin_settings.webvr == true ? '%VIEWER%/plugins/webvr.js' : null"
	        onavailable="skin_webvr_onavailable();"
	        onentervr="skin_showloading(false); webvr_onentervr(); skin_webvr_setup(); skin_reloadscene_webvr();"
	        onexitvr="webvr_onexitvr(); skin_webvr_setup(); skin_reloadscene_webvr();"
	        />
	
	<!-- webvr button style (adjust to match skin style) -->
	<style name="webvr_button_style"
	       bgroundedge="calc:skin_settings.design_bgroundedge"
	       bgcolor="get:skin_settings.design_bgcolor" bgalpha="get:skin_settings.design_bgalpha"
	       bgborder="get:skin_settings.design_bgborder"
	       bgshadow="get:skin_settings.design_bgshadow"
	       css="calc:skin_settings.design_text_css + ' font-size:' + 20*webvr_setup_scale*webvr_button_scale + 'px;'"
	       />
	
	<!-- show a 'rotate the device' info when the mobile device is in portrait orientation in VR mode -->
	<layer name="webvr_rotate_to_landscape_request" keep="true" vr="true" devices="mobile"
	       url="rotate_device.png" scale="0.5"
	       align="top" edge="center" y="28%"
	       autoalpha="true" alpha="0.0"
	       enabled="false"
	       />
	
	<events name="skin_webvr_and_gyro_events" keep="true"
	        onxmlcomplete="skin_set_webvr_or_gyro_startup_view()"
	        onresize.mobile="skin_webvr_act_as_gyro_in_portrait_mode();"
	        onloadcomplete="delayedcall(0.5, if(webvr.isenabled AND scene.count GT 1 AND skin_settings.webvr_prev_next_hotspots, set(hotspot[skin_webvr_prev_scene].visible,true); set(hotspot[skin_webvr_next_scene].visible,true); ); );"
	        onviewchange=""
	        />
	
	<action name="skin_vrdevice_intro" autorun="onstart" scope="local" devices="mobilevr">
		<!-- show directly a big enterVR button -->
		set(layer[webvr_enterbutton], 
			align=center, y=0, padding='10 20', 
			css=calc(skin_settings.design_text_css + ' font-size:20px;text-align:center;'),
			html=calc((global.title ? '[i]'+global.title+'[/i][br]' : '') + '[span style="font-size:40px"]Enter VR[span]'), 
		);
		
		<!-- add a button to show the normal skin and hide the enter vr button -->
		addlayer('skin_hide_entervrbutton', button);
		set(button, keep=true,
			type=text,
			parent=webvr_enterbutton,
			align=bottom, edge=top, y=-60,
			text='Continue normal viewing...',
			bgalpha=0,
			css='color:#FFFFFF; text-decoration:underline;',
			onclick='removelayer(webvr_enterbutton); skin_showskin();'
		);
		
		<!-- hide the skin -->
		skin_hideskin(instant);
	</action>
	
	<action name="skin_webvr_onavailable" scope="local">
		if(device.mobilevr == false,
			<!-- remove the enter vr button from the webvr.xml, use the one from the skin -->
			removelayer(webvr_enterbutton);
		);
		
		<!-- update the skin buttons to add the skin vr button -->
		skin_arrange_buttons();
			
		<!-- call the original onavailable event from the webvr.xml -->
		webvr_onavailable();
	</action>
	
	<action name="skin_set_webvr_or_gyro_startup_view">
		if( (webvr.isenabled == true AND skin_settings.webvr_keeplookingdirection == false AND have3dtransition == false) OR (!webvr.isenabled AND plugin[skin_gyro].enabled == true AND skin_settings.gyro_keeplookingdirection == false AND have3dtransition == false),
			skin_lookat( get(xml.view.hlookat) );
		);
	</action>
	
	<action name="skin_webvr_setup">
		if(webvr.isenabled,
			copy(skin_settings.loadscene_flags_backup, skin_settings.loadscene_flags);
			set(skin_settings.loadscene_flags, MERGE|KEEPVIEW|KEEPMOVING|NOPREVIEW);
			skin_webvr_act_as_gyro_in_portrait_mode(true);
			if(scene.count GT 1 AND skin_settings.webvr_prev_next_hotspots,
				set(hotspot[skin_webvr_prev_scene].visible, true);
				set(hotspot[skin_webvr_next_scene].visible, true);
				set(events[skin_webvr_and_gyro_events].onviewchange, skin_webvr_menu_following());
			);
		  ,
			if(skin_settings.loadscene_flags_backup !== null, copy(skin_settings.loadscene_flags, skin_settings.loadscene_flags_backup); );
			if(layer[webvr_rotate_to_landscape_request], tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 0.0); );
			set(hotspot[skin_webvr_prev_scene].visible, false);
			set(hotspot[skin_webvr_next_scene].visible, false);
			set(events[skin_webvr_and_gyro_events].onviewchange, null);
		);
	</action>
	
	<action name="skin_webvr_act_as_gyro_in_portrait_mode" scope="local" args="setupcall">
		if(device.mobile AND webvr.isenabled,
			div(aspect, stagewidth, stageheight);
			if(aspect != global.skin_webvr_lastaspect OR setupcall == true,
				copy(global.skin_webvr_lastaspect, aspect);
				if(stagewidth GT stageheight,
					<!-- landscape orientation - use stereo rendering and a direct/fast gyro sensor mode -->
					set(display.stereo, true);
					set(webvr.mobilevr_sensor_mode, 3);
					webvr.update();
					tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 0.0);
				  ,
					<!-- portrait orientation - use normal rendering and a smoother/slower gyro sensor mode -->
					set(display.stereo, false);
					set(webvr.mobilevr_sensor_mode, 1);
					webvr.update();
					tween(layer[webvr_rotate_to_landscape_request].alpha, 1.0);
					delayedcall(3.0, tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 1.0); );
				);
			);
		  ,
			set(global.skin_webvr_lastaspect, 0);
		);
	</action>
	
	<!-- VR scene switching hotspots -->
	<style name="skin_webvr_menu_style" torigin="view" depth="1000" scale="0.625" distorted="true" ath="0" atv="45" alpha="0.5" />
	<hotspot name="skin_webvr_prev_scene" keep="true" style="skin_base|skin_webvr_menu_style" crop="0|64|64|64"  ox="-88" onover="tween(scale,0.750);" onout="tween(scale,0.625);" vr_timeout="750" onclick="skin_nextscene_loop(-1);" visible="false" devices="webgl" />
	<hotspot name="skin_webvr_next_scene" keep="true" style="skin_base|skin_webvr_menu_style" crop="64|64|64|64" ox="+88" onover="tween(scale,0.750);" onout="tween(scale,0.625);" vr_timeout="750" onclick="skin_nextscene_loop(+1);" visible="false" devices="webgl" />
	
	<!-- floating/following VR hotspots -->
	<action name="skin_webvr_menu_following" type="Javascript"><![CDATA[
		var hs1 = krpano.get("hotspot[skin_webvr_prev_scene]");
		var hs2 = krpano.get("hotspot[skin_webvr_next_scene]");
		if(!hs1.hovering && !hs2.hovering)
		{
			var f = 0.01;	// following speed factor
			var h = krpano.view.hlookat;
			var v = krpano.view.vlookat;
			var hsh = hs1.ath;
			var hsv = hs1.atv;
			h   = (h  -(h|0))   + (((h|0)  +360180)%360) - 180.0;
			v   = (v  -(v|0))   + (((v|0)  +360180)%360) - 180.0;
			hsh = (hsh-(hsh|0)) + (((hsh|0)+360180)%360) - 180.0;
			var dh = h - hsh;
			dh += (dh > 180) ? -360 : (dh < -180) ? 360 : 0
			hsh += dh*f;
			var a = Math.abs(v - hsv) / 90.0;
			a = 1.0 * Math.max(1.0 - 2.0*Math.sqrt(a), 0);
			v = v + 55.0 - v*1.5;
			hsv = hsv*(1.0 - f) + v*f;
			hs1.ath = hs2.ath = hsh;
			hs1.atv = hs2.atv = hsv;
			hs1.alpha = hs2.alpha = a;
		}
	]]></action>
	<!-- VR support -->

	<!-- gyro plugin -->
	<plugin name="skin_gyro" keep="true" url="" plugin_url="%VIEWER%/plugins/gyro2.js" softstart="1.0" desktopsupport="false" enabled="false"
		onavailable="skin_arrange_buttons();"
		ondenied="skin_gyro_ondenied();" 
		/>

	<action name="show_more_thumb" scope="local">
		
			set(click_title_flg, true);
			set(layer[scene_click_play].visible, false);
			set(layer[scene_click_down].visible, true);
			set(layer[thumb_list].visible, true);
			set(layer[vscrollbar_thumb_bg].height, '100%');
	</action>
	<action name="gen_thumb_scroll" scope="local" args="scene_name">
		removelayer(thumb_list, true);
		addlayer(thumb_list);
		set(layer[thumb_list].type, "container");
		set(layer[thumb_list].parent, "scrollarea_thumb");
		set(layer[thumb_list].keep, true);
		set(layer[thumb_list].width, "100%");
		set(layer[thumb_list].visible, true);
		set(layer[thumb_list].bgalpha, 0.0);

		set(i, 0);
		for(set(sceneindex, 0), sceneindex LT scene.count, inc(sceneindex),
			if(scene[get(sceneindex)].doc == get(scene_name),
				copy(scname, scene[get(sceneindex)].name);
				copy(title, scene[get(scname)].title);
				copy(thumburl, scene[get(scname)].thumburl);
				set(scname_thumb, calc(get(scname) + 'thumbs'));
				<!-- Tính vị trí grid -->
				set(oy, calc(get(i) * 130 + 10));   <!-- khoảng cách dọc -->
						<!-- Tạo thumbnail -->
				addlayer(calc(get(scname_thumb) + 'bd'));
				<!-- set(layer[get(scname_thumb)].parent, thumb_wall); -->
				set(layer[calc(get(scname_thumb) + 'bd')].parent, "thumb_list");
				set(layer[calc(get(scname_thumb) + 'bd')].type, 'container');
				set(layer[calc(get(scname_thumb) + 'bd')].align, top);
				set(layer[calc(get(scname_thumb) + 'bd')].oy, get(oy));
				set(layer[calc(get(scname_thumb) + 'bd')].width, 234);
				set(layer[calc(get(scname_thumb) + 'bd')].height, 124);
				set(layer[calc(get(scname_thumb) + 'bd')].distorted, true);
				set(layer[calc(get(scname_thumb) + 'bd')].zorder, 6);
				set(layer[calc(get(scname_thumb) + 'bd')].keep, true);
				set(layer[calc(get(scname_thumb) + 'bd')].background, true);
				set(layer[calc(get(scname_thumb) + 'bd')].bgalpha, 0.8);
				set(layer[calc(get(scname_thumb) + 'bd')].bgcolor, 0xe8a107);
				set(layer[calc(get(scname_thumb) + 'bd')].bgroundedge, 10);
				set(layer[calc(get(scname_thumb) + 'bd')].maskchildren, true);
				set(layer[calc(get(scname_thumb) + 'bd')].padding, 10);
						<!-- Tạo thumbnail -->
				addlayer(calc(get(scname_thumb) + 'bg'));
				<!-- set(layer[get(scname_thumb)].parent, thumb_wall); -->
				set(layer[calc(get(scname_thumb) + 'bg')].parent, calc(get(scname_thumb) + 'bd'));
				set(layer[calc(get(scname_thumb) + 'bg')].type, 'container');
				set(layer[calc(get(scname_thumb) + 'bg')].align, center);
				set(layer[calc(get(scname_thumb) + 'bg')].width, 230);
				set(layer[calc(get(scname_thumb) + 'bg')].height, 120);
				set(layer[calc(get(scname_thumb) + 'bg')].distorted, true);
				set(layer[calc(get(scname_thumb) + 'bg')].zorder, 6);
				set(layer[calc(get(scname_thumb) + 'bg')].keep, true);
				set(layer[calc(get(scname_thumb) + 'bg')].background, true);
				set(layer[calc(get(scname_thumb) + 'bg')].bgalpha, 0.8);
				set(layer[calc(get(scname_thumb) + 'bg')].bgcolor, 0xe8a107);
				set(layer[calc(get(scname_thumb) + 'bg')].bgroundedge, 10);
				set(layer[calc(get(scname_thumb) + 'bg')].maskchildren, true);
				set(layer[calc(get(scname_thumb) + 'bg')].padding, 10);
				
				addlayer(get(calc(get(scname_thumb) + 'text')));
				<!-- set(hotspot[get(calc(get(scname_thumb) + 'text'))].parent, thumb_wall); -->
				set(layer[get(calc(get(scname_thumb) + 'text'))].parent, calc(get(scname_thumb) + 'bg'));
				set(layer[get(calc(get(scname_thumb) + 'text'))].type, 'text');
				set(layer[get(calc(get(scname_thumb) + 'text'))].html, get(title));
				set(layer[get(calc(get(scname_thumb) + 'text'))].align, bottomleft);
				set(layer[get(calc(get(scname_thumb) + 'text'))].scale, 1.0);
				set(layer[get(calc(get(scname_thumb) + 'text'))].distorted, true);
				set(layer[get(calc(get(scname_thumb) + 'text'))].zorder, 8);
				set(layer[get(calc(get(scname_thumb) + 'text'))].keep, true);
				set(layer[get(calc(get(scname_thumb) + 'text'))].background, false);
				set(layer[get(calc(get(scname_thumb) + 'text'))].css, 'color:#fff; font-size:14px');
				set(temp, calc('skin_loadscene(' + get(scname) + ',' + get(skin_settings.loadscene_blend) + ');'));
				set(layer[get(calc(get(scname_thumb) + 'text'))].onclick, get(temp));

				addlayer(get(scname_thumb));
				<!-- set(hotspot[get(scname_thumb)].parent, thumb_wall); -->
				set(layer[get(scname_thumb)].url, get(thumburl));
				set(layer[get(scname_thumb)].parent, calc(get(scname_thumb) + 'bg'));
				set(layer[get(scname_thumb)].type, 'image');
				set(layer[get(scname_thumb)].align, center);
				set(layer[get(scname_thumb)].width, 240);
				set(layer[get(scname_thumb)].height, 130);
				set(layer[get(scname_thumb)].scale, 1.0);
				set(layer[get(scname_thumb)].distorted, true);
				set(layer[get(scname_thumb)].zorder, 7);
				set(layer[get(scname_thumb)].keep, true);
				set(temp, calc('skin_loadscene(' + get(scname) + ',' + get(skin_settings.loadscene_blend) + ');'));
				set(layer[get(scname_thumb)].onclick, get(temp));
				<!-- Tạo thumbnail -->

				inc(i);
			);
		);
		set(layer[thumb_list].height, calc(get(i) * 130 + 10));
	</action>

<action name="build_menu" autorun="onstart" scope="local">
    set(layer_y,20);
    txtsplit(get(menu_items), "," , items);
    for(set(i,0), i LT items.count, inc(i),
        txtsplit(get(items[get(i)].value), '|', item);
        set(scene_name, get(item[0].value));
        set(scene_title, get(item[1].value));
        set(scene_doc, get(item[2].value));
        addlayer(get(scene_name));
        set(layer[get(scene_name)].parent, 'menu_box');
        set(layer[get(scene_name)].state, 'normal');
        set(layer[get(scene_name)].type, 'text');
        set(layer[get(scene_name)].align, 'lefttop');
        set(layer[get(scene_name)].x, 20);
        set(layer[get(scene_name)].keep, true);
        set(layer[get(scene_name)].doc, get(scene_doc));
        set(layer[get(scene_name)].y, get(layer_y));
        set(layer[get(scene_name)].html, get(scene_title));
        set(layer[get(scene_name)].background, false);
        set(layer[get(scene_name)].zorder, 5);
        set(layer[get(scene_name)].css, 'color:#ffffff; font-size:18px; border-left:4px solid #ffffff; padding-left:10px;');

        set(layer[get(scene_name)].onover,  "menu_item_over();");
        set(layer[get(scene_name)].onout,   "menu_item_out();");
        set(layer[get(scene_name)].onclick, "menu_item_click(true);");

        inc(layer_y, 40);
    );
</action>
<action name="menu_item_over" scope="local">
	set(layer[get(caller.name)].css, 'color:rgb(255, 170, 255); font-size:18px; border-left:4px solid #ffcc00; padding-left:10px;');
	tween(layer[get(caller.name)].scale, 1.1, 1.0, easeOutExpo);
	tween(layer[thumb_box].bgalpha, 0.5, 1.0, easeOutExpo);
	set(layer[image_box].visible, true);
	set(layer[image_demo].url, get(scene[get(caller.name)].thumburl));
</action>

<action name="menu_item_out" scope="local">
	if(get(check_click) == true,
		tween(layer[thumb_box].bgalpha, 0.5, 1.0, easeOutExpo);
		,
		tween(layer[thumb_box].bgalpha, 0, 1.0, easeOutExpo);
	);
    if(layer[get(caller.name)].state != 'active',
        set(layer[get(caller.name)].css, 'color:#ffffff; font-size:18px; border-left:4px solid #ffffff; padding-left:10px;');
		tween(layer[get(caller.name)].scale, 1.0, 1.1, easeOutExpo);
		);
	set(layer[image_box].visible, false);
	</action>

<action name="menu_item_click" scope="local" args="is_check">
	if(is_check,
		set(check_click,true);
		set(click_title_flg, true);
		tween(layer[thumb_list_container].x, 0, 1, easeOutExpo);
		tween(layer[menu_box].x, 300, 0.4, easeOutExpo);
		set(layer[scene_click_title].html, get(caller.html));
		gen_thumb_scroll(get(caller.doc));
		set(layer[thumb_box].bgcapture, true);
		set(layer[thumb_box].capture, true);
		set(layer[thumb_box].onclick, close_thumb_list(););
		set(layer[thumb_box].ondown, close_thumb_list(););
		show_more_thumb();
		,
		set(check_click,false);
		tween(layer[thumb_list_container].x, -300, 0.4, easeOutExpo);
		tween(layer[menu_box].x, 0, 1, easeOutExpo);
		tween(layer[thumb_box].bgalpha, 0, 1.0, easeOutExpo);
		set(layer[thumb_box].bgcapture, false);
		set(layer[thumb_box].capture, false);
		set(layer[thumb_box].onclick, '');
		set(layer[thumb_box].ondown, '');
	);
</action>

<action name="set_select_item" scope="local">
	set(current, get(scene[get(xml.scene)].doc));
    txtsplit(get(menu_items), "," , items);
    for(set(i,0), i LT items.count, inc(i),
		txtsplit(get(items[get(i)].value), '|', item);
        set(scene_name, get(item[2].value));
		if(scene_name == current,
			set(layer[get(item[0].value)].state, 'active');
			set(layer[get(item[0].value)].css, 'color:rgb(255, 170, 255); font-size:18px; border-left:4px solid #ffcc00; padding-left:10px;');
		,
			set(layer[get(item[0].value)].state, 'normal');
			tween(layer[get(item[0].value)].scale, 1.0, 1.1, easeOutExpo);
			set(layer[get(item[0].value)].css, 'color:#ffffff; font-size:18px; border-left:4px solid #ffffff; padding-left:10px;');
		);
    );
</action>

<action name="close_thumb_list" scope="local">
	menu_item_click(false);
</action>

<action name="hide_all_thumbs" scope="local">
	set(i, 0);
	for(set(i, 0), i LT global.thumbs.length, inc(i),
		copy(hsname, global.thumbs[get(i)]);
		removehotspot(get(hsname));
		removehotspot(calc(get(hsname) + '_text'));
		removehotspot(calc(get(hsname) + 'bg'));
	);
	set(hotspot[thumb_wall].visible, false);
	set(hotspot[close_button_wall].visible, false);
</action>
<action name="get_next_scene" scope="local">
	set(nextscenename, "");
	if(isset(scene[get(xml.scene)].thumbindex),
		sub(lastsceneindex, thumbarray.length, 1);
		add(nextscenename, scene[get(xml.scene)].thumbindex, +1);
		if(nextscenename LT 0, copy(nextscenename,lastsceneindex));
		if(nextscenename GT lastsceneindex, set(nextscenename,0));
		set(nextscenename, get(thumbarray[get(nextscenename)].title));
		,
		add(nextscenename, scene[get(xml.scene)].index, +1);
		sub(lastsceneindex, scene.count, 1);
		if(nextscenename LT 0, copy(nextscenename,lastsceneindex));
		if(nextscenename GT lastsceneindex, set(nextscenename,0));
		set(nextscenename, get(scene[get(nextscenename)].title));
	);
	if(nextscenename != null,
		set(layer[text_next_scene].html, get(nextscenename));
	);
</action>
<action name="show_all_thumbs" scope="local">
	generate_scene_thumbs();
	set(i, 0);
	for(set(i, 0), i LT global.thumbs.length, inc(i),
		copy(hsname, global.thumbs[get(i)]);

		set(hotspot[get(hsname)].visible, true);
		set(hotspot[calc(get(hsname) + '_text')].visible, true);
		set(hotspot[calc(get(hsname) + 'bg')].visible, true);

		set(hotspot[get(hsname)].atv, get(view.vlookat));
		set(hotspot[calc(get(hsname) + '_text')].atv, get(view.vlookat));
		set(hotspot[calc(get(hsname) + 'bg')].atv, get(view.vlookat));
		set(hotspot[get(hsname)].ath, get(view.hlookat));
		set(hotspot[calc(get(hsname) + '_text')].ath, get(view.hlookat));
		set(hotspot[calc(get(hsname) + 'bg')].ath, get(view.hlookat));
	);
	set(hotspot[thumb_wall].visible, true);
	set(hotspot[close_button_wall].visible, true);
	set(hotspot[thumb_wall].atv, get(view.vlookat));
	set(hotspot[close_button_wall].atv, get(view.vlookat));
	set(hotspot[thumb_wall].ath, get(view.hlookat));
	set(hotspot[close_button_wall].ath, get(view.hlookat));
</action>
<action name="generate_scene_thumbs" scope="local">
	set(i, 0);
	set(columns, 3);                  <!-- số cột của lưới thumbnails -->
	def(global.thumbs, array);
	copy(currentScene, scene[get(xml.scene)].doc);
	for(set(sceneindex, 0), sceneindex LT scene.count, inc(sceneindex),
		if(scene[get(sceneindex)].doc == currentScene,
			copy(scname, scene[get(sceneindex)].name);
			copy(title, scene[get(scname)].title);
			copy(thumburl, scene[get(scname)].thumburl);

			<!-- Tính vị trí grid -->
			mod(x, get(i), get(columns));
			div(y, get(i), get(columns));
			Math.floor(y);
			<!-- Tính offset (tọa độ) -->
			set(ox, calc(get(x) * 250 - 240));   <!-- khoảng cách ngang, canh giữa -->
			set(oy, calc(get(y) * 160 - 150));   <!-- khoảng cách dọc -->

					<!-- Tạo thumbnail -->
			addhotspot(get(scname));
			<!-- set(hotspot[get(scname)].parent, thumb_wall); -->
			set(hotspot[get(scname)].url, get(thumburl));
			set(hotspot[get(scname)].type, 'image');
			set(hotspot[get(scname)].ox, get(ox));
			set(hotspot[get(scname)].oy, calc(get(oy) - 10));
			set(hotspot[get(scname)].width, 180);
			set(hotspot[get(scname)].height, 80);
			set(hotspot[get(scname)].scale, 1.0);
			set(hotspot[get(scname)].distorted, true);
			set(hotspot[get(scname)].zorder, 14);
			set(hotspot[get(scname)].keep, true);
			set(temp, calc('skin_loadscene(' + get(scname) + ',' + get(skin_settings.loadscene_blend) + ');' + 'hide_all_thumbs();'));
			set(hotspot[get(scname)].onclick, get(temp));
			<!-- Tạo thumbnail -->
			addhotspot(calc(get(scname) + 'bg'));
			<!-- set(hotspot[get(scname)].parent, thumb_wall); -->
			set(hotspot[calc(get(scname) + 'bg')].url, skin/icons/bg_image.png);
			set(hotspot[calc(get(scname) + 'bg')].type, 'image');
			set(hotspot[calc(get(scname) + 'bg')].ox, get(ox));
			set(hotspot[calc(get(scname) + 'bg')].oy, get(oy));
			set(hotspot[calc(get(scname) + 'bg')].width, 200);
			set(hotspot[calc(get(scname) + 'bg')].height, 130);
			set(hotspot[calc(get(scname) + 'bg')].distorted, true);
			set(hotspot[calc(get(scname) + 'bg')].zorder, 13);
			set(hotspot[calc(get(scname) + 'bg')].keep, true);
			set(hotspot[calc(get(scname) + 'bg')].background, true);
			set(hotspot[calc(get(scname) + 'bg')].bgroundedge, 7);

			<!-- Thêm text title -->
			addhotspot(calc(get(scname) + '_text'));
			<!-- set(hotspot[get(scname) + '_text'].parent, thumb_wall); -->
			set(hotspot[calc(get(scname) + '_text')].type, text);
			set(hotspot[calc(get(scname) + '_text')].html, get(title));
			set(hotspot[calc(get(scname) + '_text')].css, 'text-align:center;color:#fff;font-size:12px;background:none;background-color:none;');
			set(hotspot[calc(get(scname) + '_text')].width, 200);
			set(hotspot[calc(get(scname) + '_text')].height, 20);
			set(hotspot[calc(get(scname) + '_text')].ox, get(ox));
			set(hotspot[calc(get(scname) + '_text')].distorted, true);
			set(hotspot[calc(get(scname) + '_text')].oy, calc(get(oy) + 40));
			set(hotspot[calc(get(scname) + '_text')].keep, true);
			set(hotspot[calc(get(scname) + '_text')].zorder, 14);
			set(hotspot[calc(get(scname) + '_text')].background, false);

			<!-- Lưu vào mảng -->
			set(global.thumbs[get(global.thumbs.length)], get(scname));
			inc(i);
		);
	);
</action>
	<action name="locate_map_hover" scope="local" args="layertoglow, layertext, istrue">
		if(layertoglow != null,
			if(istrue,
				set(layer[get(layertoglow)].visible, true);
				set(layer[get(layertext)].visible, true);
				,
				set(layer[get(layertoglow)].visible, false);
				set(layer[get(layertext)].visible, false);
			);
		);
	</action>
	
	<action name="remove_thumb_map" scope="local">
		set(i, 0);
		for(set(i, 0), i LT scene.count, inc(i),
			copy(spotaround, scene[get(i)].name );
			removelayer(calc(get(spotaround) + 'thumbmap'));
			removelayer(calc(get(spotaround) + '_text'));
		);
	</action>
	
	<action name="do_animation" scope="local" args="framewidth, frameheight, framerate">
		<!-- define local variables -->
		calc(local.xframes, (caller.imagewidth /framewidth) BOR 0);
		calc(local.frames, xframes * ((caller.imageheight / frameheight) BOR 0));
		def(local.frame, integer, 0);
		
		<!-- set the first frame -->
		calc(caller.crop, '0|0|' + framewidth + '|' + frameheight);
		
		<!-- do the animation -->
		setinterval(calc('crop_anim_' + caller.name), calc(1.0 / framerate),
			if(caller.loaded,
				inc(frame);
				if(frame GE frames, if(caller.onlastframe !== null, callwith(caller, onlastframe() ) ); set(frame,0); );
				mod(xpos, frame, xframes);
				div(ypos, frame, xframes);
				Math.floor(ypos);
				mul(xpos, framewidth);
				mul(ypos, frameheight);
				calc(caller.crop, xpos + '|' + ypos + '|' + framewidth + '|' + frameheight);
			  ,
				<!-- stop the interval when the hotspot gets removed -->
				clearinterval(calc('crop_anim_' + caller.name));
			);
		);
	</action>
	
	<action name="start_vr">
		if(hotspot[thumb_wall].visible,
			hide_all_thumbs();
			tween(hotspot[thumb_wall].alpha, 0, 0.5, easeOutExpo);,
			show_all_thumbs();
			tween(hotspot[thumb_wall].alpha, 1.0, 0.5, easeOutExpo);
		);
	</action>

	<action name="default_look" scope="local">
		tween(view.fisheye, 0, 0, easeOutExpo);
		lookto(0, 0, 140);
	</action>

	<action name="view_360_action" scope="local">
		if(view_360 == 'none',
		set(view_360, 'sky');
		cm_littleplanet_view(0, 60);
		,
			if(view_360 == 'sky',
				set(view_360, 'land');
				cm_littleplanet_view(0, -60);
			,
				set(view_360, 'none');
				cm_littleplanet_view(0, 0);
			);
		);
	</action>

	<action name="cm_littleplanet_view">
		set(view.fovtype, "MFOV");

		if(view_360 != 'none',
			set(view.stereographic, true);
			tween(view.fisheye, 1.0, 1.5, easeOutExpo);
			set(view.fov, 240);
		,
			set(view.stereographic, false);
			tween(view.fisheye, 0, 0, easeOutExpo);
			set(view.fov, 120);
		);

		lookto(%1, %2, get(view.fov), 120, 100, easeOutExpo);
	</action>

	<action name="show_info" scope="local">
		if(scene[get(xml.scene)].child == "",
			set(layer[somecontent].html, get(data[get(scene[get(xml.scene)].doc)].content));
			,
			set(layer[somecontent].html, get(data[get(scene[get(xml.scene)].child)].content));
		);
		if(layer[box].visible,
			tween(layer[box].alpha, 0, 0.5, default, set(layer[box].visible, false));
		,
			set(layer[box].visible, true);
			tween(layer[box].alpha, 1.0, 0.5);
		);

	</action>

	<action name="show_info_last_img" scope="local">
		<!-- set(layer[somecontent].html, get(data[get(scene[get(xml.scene)].doc)].content)); -->
		if(layer[box_last_img].visible,
			tween(layer[box_last_img].alpha, 0, 0.5, default, set(layer[box_last_img].visible, false));
		,
			set(layer[box_last_img].visible, true);
			tween(layer[box_last_img].alpha, 1.0, 0.5);
		);

	</action>

	<action name="set_global" onstart="autorun" scope="local">
		if(scene[get(xml.scene)].doc == "chua-long-son",
			set(global.title, 'Chùa Long Sơn'));
		if(scene[get(xml.scene)].doc == "thap-ponagar",
			set(global.title, 'Tháp Bà Panogar'));
		if(scene[get(xml.scene)].doc == "vin-wonder",
			set(global.title, 'VinWonder'));
		if(scene[get(xml.scene)].doc == "quang-truong",
			set(global.title, 'Quảng Trường 2-4'));
		if(scene[get(xml.scene)].doc == "bai-bien",
			set(global.title, 'Bãi biển Trần Phú'));
		if(scene[get(xml.scene)].doc == "vien-hai-duong-hoc",
			set(global.title, 'Viện Hải Dương Học'));
	</action>

	<action name="play_audio">
	if(layer[icon_voice].visible == true,
		if(scene[get(xml.scene)].child == "",
			js(playAudio(get(scene[get(xml.scene)].doc),'on'));
			js(playIntro(get(scene[get(xml.scene)].doc),'on'));
			,
			js(playAudio(get(scene[get(xml.scene)].child),'on'));
			js(playIntro(get(scene[get(xml.scene)].child),'on'));
		);
	);
	</action>

	<action name="toggle_audio" scope="local">
		set(first_drag, false);
		if(layer[icon_voice].visible == true,
			set(layer[icon_voice].visible, false);
			set(layer[icon_voice_off].visible, true);
			if(scene[get(xml.scene)].child == "",
				js(playAudio(get(scene[get(xml.scene)].doc),'on'));
				js(playIntro(get(scene[get(xml.scene)].doc),'on'));
				,
				js(playAudio(get(scene[get(xml.scene)].child),'on'));
				js(playIntro(get(scene[get(xml.scene)].child),'on'));
			);
			,
			set(layer[icon_voice].visible, true);
			set(layer[icon_voice_off].visible, false);
			if(scene[get(xml.scene)].child == "",
				js(playAudio(get(scene[get(xml.scene)].doc),'on'));
				js(playIntro(get(scene[get(xml.scene)].doc),'on'));
				,
				js(playAudio(get(scene[get(xml.scene)].child),'on'));
				js(playIntro(get(scene[get(xml.scene)].child),'on'));
			);
		);
	</action>

	<action name="toggle_rotate" scope="local">
		if(layer[icon_rotate].visible == true,
			set(layer[icon_rotate].visible, false);
			set(layer[icon_rotate_off].visible, true);
			autorotate.stop();
			,
			set(layer[icon_rotate].visible, true);
			set(layer[icon_rotate_off].visible, false);
			autorotate.start();
		);
	</action>
	
	<action name="toggle_fullscene" scope="local">
		if(layer[icon_zoom_out].visible == true,
			set(layer[icon_zoom_out].visible, false);
			set(layer[icon_zoom_in].visible, true);
			switch(fullscreen);
			,
			set(layer[icon_zoom_out].visible, true);
			set(layer[icon_zoom_in].visible, false);
			switch(fullscreen);
		);
	</action>

	<action name="toggle_camera" type="Javascript"><![CDATA[
		try {
			if (!krpano.webGL || !krpano.webGL.context) {
			krpano.trace(3, "no webgl context");
			return;
			}
			var attrs = krpano.webGL.context.getContextAttributes();
			if (!attrs || !attrs.preserveDrawingBuffer) {
			krpano.trace(3, "no preserveDrawingBuffer - enable it in embedpano.webglsettings");
			return;
			}

			// Lấy ảnh PNG base64
			var dataURL = krpano.webGL.canvas.toDataURL("image/png");

			// Tạo filename theo timestamp
			var now = new Date();
			var fn = "krpano_screenshot_" +
					now.getFullYear() + ("0"+(now.getMonth()+1)).slice(-2) + ("0"+now.getDate()).slice(-2) + "_" +
					("0"+now.getHours()).slice(-2) + ("0"+now.getMinutes()).slice(-2) + ("0"+now.getSeconds()).slice(-2) +
					".png";

			// Tải về (Chrome/Edge/Firefox/Android…)
			var a = document.createElement("a");
			a.href = dataURL;
			a.download = fn;

			// Fallback cho Safari iOS/macOS (download attr có thể không hoạt động):
			// Mở tab mới hiển thị ảnh để người dùng bấm giữ lưu ảnh
			var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
			if (isSafari) {
			var w = window.open();
			if (w) { w.document.write('<img src="'+dataURL+'" style="width:100%;">'); }
			else { a.click(); }
			} else {
			a.click();
			}
		} catch (err) {
			krpano.trace(3, "screenshot error: " + err);
		}
		]]>
	</action>

	<!-- Ẩn tất cả layer/hotspot có is_ui="true", lưu lại trạng thái visible -->
	<action name="ui_hide_all" scope="local">
	for(set(i,0), i LT layer.count, inc(i),
		if(layer[get(i)].is_ui === true,
		copy(layer[get(i)]._vis_bak, layer[get(i)].visible);
		set(layer[get(i)].visible, false);
		);
	);
	for(set(h,0), h LT hotspot.count, inc(h),
		if(hotspot[get(h)].is_ui === true,
		copy(hotspot[get(h)]._vis_bak, hotspot[get(h)].visible);
		set(hotspot[get(h)].visible, false);
		);
	);
	</action>

	<!-- Khôi phục trạng thái visible cũ -->
	<action name="ui_restore_all" scope="local">
	for(set(i,0), i LT layer.count, inc(i),
		if(layer[get(i)]._vis_bak !== null,
		set(layer[get(i)].visible, get(layer[get(i)]._vis_bak));
		delete(layer[get(i)]._vis_bak);
		);
	);
	for(set(h,0), h LT hotspot.count, inc(h),
		if(hotspot[get(h)]._vis_bak !== null,
		set(hotspot[get(h)].visible, get(hotspot[get(h)]._vis_bak));
		delete(hotspot[get(h)]._vis_bak);
		);
	);
	</action>

	<!-- Chụp không UI: Ẩn → đợi 1 frame → chụp → đợi 1 frame → khôi phục -->
	<action name="shot_without_ui">
	ui_hide_all();
	delayedcall(0.03, 
		toggle_camera();
		delayedcall(0.03, ui_restore_all());
	);
	</action>


	<action name="skin_gyro_ondenied" scope="local">
		addlayer(skin_gyro_ondenied);
		layer[skin_gyro_ondenied].loadstyle(webvr_button_style);
		set(layer[skin_gyro_ondenied],
			align='center',
			html='Using the gyroscope was denied!',
			onclick='set(enabled,false); tween(alpha,0,0.5,default,removelayer(get(name)));'
		);
		delayedcall(2.0,
			callwith(layer[skin_gyro_ondenied], onclick(); );
		);
	</action>

	<action name="toggle_menu" scope="local">
		if(layer[skin_btn_prev].visible,
			set(layer[skin_btn_prev].visible, false);
			set(layer[btn_view].visible, false);
			set(layer[btn_audio].visible, false);
			set(layer[btn_360].visible, false);
			set(layer[btn_vr].visible, false);
			set(layer[btn_menu].visible, false);
			set(layer[btn_camera].visible, false);
			set(layer[btn_rotate].visible, false);
			set(layer[btn_zoom].visible, false);
			,
			set(layer[skin_btn_prev].visible, true);
			set(layer[btn_view].visible, true);
			set(layer[btn_audio].visible, true);
			set(layer[btn_zoom].visible, true);
			set(layer[btn_rotate].visible, true);
			set(layer[btn_camera].visible, true);
			set(layer[btn_360].visible, true);
			set(layer[btn_vr].visible, true);
			set(layer[btn_menu].visible, true);
		)
	</action>

	<!-- skin events -->
	<events name="skin_events" keep="true"
	onxmlcomplete="set(events[skin_events].onxmlcomplete, skin_showloading(true); ); skin_showloading(true); skin_startup();"
	onnewpano="remove_thumb_map(); skin_update_scene_infos(); skin_deeplinking_update_url();get_next_scene(); "
	onnewscene="skin_updatethumbsview(true); remove_thumb_map(); set_global();hide_all_thumbs(); play_audio(); set_select_item(); set(layer[menu_box_mobile].visible,false);"
	onloadcomplete="skin_showloading(false); "
	onidle="skin_deeplinking_update_url();"
	onresize="skin_onresize();"
	onenterfullscreen.fullscreensupport="set(layer[skin_btn_fs].crop, '64|576|64|64');"
	onexitfullscreen.fullscreensupport="set(layer[skin_btn_fs].crop, '0|576|64|64');"
	onkeydown="skin_keydown_event();"
	onmousedown="skin_mousedown_event();"
	ontouchstart="skin_mousedown_event();"
	onwheel="close_thumb_list()"
	/>
	
	<action name="skin_mousedown_event" scope="local">
		if(first_drag,
			set(layer[cover].visible,false);
            set(control.usercontrol, all);         
			set(layer[icon_voice].visible, true);
			set(layer[icon_voice_off].visible, false);
			if(scene[get(xml.scene)].child == "",
				js(playAudio(get(scene[get(xml.scene)].doc),'on'));
				js(playIntro(get(scene[get(xml.scene)].doc),'on'));
				,
				js(playAudio(get(scene[get(xml.scene)].child),'on'));
				js(playIntro(get(scene[get(xml.scene)].child),'on'));
			);
			set(first_drag, false);
		)
		skin_showmap(false);
	</action>

	<!-- skin actions -->
	
	<action name="skin_onstart_loadscene" scope="local" autorun="onstart">
		
		<!-- load first scene -->
		loadscene(calc(isset(startscene) ? startscene : 0), null, MERGE);
		skin_showmap(false);
		<!-- set optional startup lookat -->
		if(isset(startlookat),
			txtsplit(startlookat, ',', hlookat,vlookat,fov,distortion,architectural);
			lookat(get(hlookat),get(vlookat),get(fov),get(distortion),get(architectural));
		);

	</action>
	
	<action name="set_scence_array" scope="local" autorun="onstart">
		def(global.scence_array, array);
		set(global.scence_array.count, 0);
	</action>
	
	<action name="skin_startup" scope="local">
		
		<!-- apply skin settings on startup -->
		if(skin_settings.thumbs,
			if(skin_settings.thumbs_opened,
				set(layer[skin_thumbs].state, 'opened');
				set(layer[skin_thumbs_container].visible, true);
			);
			copy(layer[skin_thumbs].draggable, skin_settings.thumbs_dragging);
			if(skin_settings.thumbs_onhoverscrolling AND device.mouse,
				set(layer[skin_thumbs].draggable, false);
				set(layer[skin_thumbs].onhover_autoscrolling, true);
			);
		);

		if(skin_settings.gyro AND !device.desktop,
			copy(plugin[skin_gyro].url, plugin[skin_gyro].plugin_url);
		);

		if(skin_settings.maps == true,
			set(layer[skin_btn_map].visible, true);

			if (skin_settings.maps_loadonfirstuse == false,
				skin_load_maps_plugin();
			);
		);

		if(skin_settings.littleplanetintro AND !global.startlookat AND device.webgl,
			skin_setup_littleplanetintro();
		);

		skin_addthumbs();
		skin_onresize();
		skin_updatethumbsview(false);

		set(layer[skin_layer].visible, true);

		if(device.mobile or device.tablet,
			set(layer[btn_next_scene].visible, false);
		);
	</action>
	

	<action name="skin_load_maps_plugin">
		if (!layer[skin_map].url,
			if(skin_settings.maps_type == 'bing',
				copy(layer[skin_map].key, skin_settings.maps_bing_api_key);
				set(layer[skin_map].url, '%VIEWER%/plugins/bingmaps.js');
			  ,skin_settings.maps_type == 'google',
			 	copy(layer[skin_map].key, skin_settings.maps_google_api_key);
				set(layer[skin_map].url, '%VIEWER%/plugins/googlemaps.js');
			  ,
				copy(layer[skin_map].tileprovider, skin_settings.maps_type);
				includexml("%VIEWER%/plugins/krpanomaps.xml",
					layer[skin_map].loadstyle("krpanomaps");
				);
			);
		);
	</action>
	

	<action name="skin_addthumbs" scope="local">
		
		<!-- build a global array of visible scene thumbnails -->
		def(global.thumbarray, array);
		set(thumbcount, 0);
		for(set(i,0), i LT scene.count, inc(i),
			if(isvalue(scene[get(i)].thumburl) AND scene[get(i)].skipthumb != true,
				<!-- link thumbarray[i1] to scene[i2] -->
				set(thumbarray[get(thumbcount)], get(scene[get(i)]));
				set(scene[get(i)].sceneindex, get(i));
				set(scene[get(i)].thumbindex, get(thumbcount));
				inc(thumbcount);
			);
		);
		
		if(skin_settings.thumbs == false,
			set(layer[skin_btn_thumbs].visible,false);
		  ,
			copy(thumbwidth, skin_settings.thumbs_width);
			copy(thumbheight, skin_settings.thumbs_height);
			copy(thumbpadding, skin_settings.thumbs_padding);
			copy(thumbcrop, skin_settings.thumbs_crop);

			calc(thumbxoffset, thumbwidth + thumbpadding);
			calc(thumbxcenter, thumbxoffset * 0.5);
			calc(thumbbarwidth, thumbxoffset * thumbcount + thumbpadding);
			calc(thumbbarheight, thumbpadding + thumbheight + thumbpadding);

			if(skin_settings.thumbs_scrollindicator,
				copy(layer[skin_thumbs_scrollindicator].y, thumbbarheight);
				add(thumbbarheight, layer[skin_thumbs_scrollindicator].height);
			);
			
			set(layer[skin_thumbs], width=get(thumbbarwidth), height=get(thumbbarheight) );

			calc(layer[skin_thumbs_scrollleft].y, thumbbarheight * 0.5);
			calc(layer[skin_thumbs_scrollright].y, thumbbarheight * 0.5);

			for(set(i,0), i LT thumbcount, inc(i),
			
				copy(currentscene, thumbarray[get(i)]);

				calc(thumbname, 'skin_thumb_' + i);
				addlayer(get(thumbname));

				set(layer[get(thumbname)],
					url=get(currentscene.thumburl),
					keep=true,
					parent='skin_thumbs',
					align='lefttop',
					crop=get(thumbcrop),
					width=get(thumbwidth),
					height=get(thumbheight),
					x=calc(thumbpadding + i*thumbxoffset),
					y=get(thumbpadding),
					linkedscene=get(currentscene.name),
					onclick='copy(layer[skin_thumbborder].parent, name); skin_loadscene(get(linkedscene),get(skin_settings.loadscene_blend));'
				);
					
				set(currentscene, 
					thumbx=calc(thumbpadding + i*thumbxoffset + thumbxcenter),
					thumby=get(thumbpadding)
				);
					
				if(skin_settings.tooltips_thumbs,
					set(layer[get(thumbname)].tooltip, get(currentscene.title) );
					layer[get(thumbname)].loadstyle(skin_tooltips);
				);
					
				if(skin_settings.thumbs_text,
					calc(thumbtext, 'skin_thumbtext_' + i);
					addlayer(get(thumbtext));
					layer[get(thumbtext)].loadstyle(skin_thumbtext_style);
					set(layer[get(thumbtext)], keep=true, parent=get(thumbname), html=get(currentscene.title) );
				);
			);
			
			if(thumbcount == 1,
				set(layer[skin_thumbs].align, 'lefttop');
			  ,
				set(layer[skin_thumbs].align, 'top');
			);
		);
	</action>


	<!-- called from bing- or google-maps plugin onmapready event -->
	<action name="skin_addmapspots" scope="local">
		for(set(i,0), i LT scene.count, inc(i),
			if(scene[get(i)].lat,
				calc(spotname, 'spot' + i);
				calc(spotclickevent, 'skin_hidetooltips(); activatespot(' + spotname + '); skin_loadscene(' + scene[get(i)].name + ',get(skin_settings.loadscene_blend)); ' );
				copy(scene[get(i)].mapspotname, spotname);
				caller.addspot(get(spotname), get(scene[get(i)].lat), get(scene[get(i)].lng), get(scene[get(i)].heading), false, get(spotclickevent), null);
				if(skin_settings.tooltips_mapspots,
					set(layer[skin_map].spot[get(spotname)].tooltip, get(scene[get(i)].title) );
					txtadd(layer[skin_map].spot[get(spotname)].onover, 'set(hovering,true);',  get(style[skin_tooltips].onover:addevent) );
					txtadd(layer[skin_map].spot[get(spotname)].onout,  'set(hovering,false);', get(style[skin_tooltips].onout:addevent)  );
				);
			);
		);
		caller.activatespot( calc(xml.scene != null ? scene[get(xml.scene)].mapspotname : 'spot0') );
		caller.zoomToSpotsExtent();
	</action>


	<action name="skin_setup_littleplanetintro" scope="local">
		skin_hideskin(instant);
		set(global.lpinfo, scene=get(xml.scene), hlookat=get(view.hlookat), vlookat=get(view.vlookat), fov=get(view.fov), fovmax=get(view.fovmax), limitview=get(view.limitview) );
		set(view, fovmax=170, limitview=lookto, vlookatmin=90, vlookatmax=90);
		lookat(calc(global.lpinfo.hlookat - 180), 90, 150, 1, 0, 0);
		set(events[lp_events].onloadcomplete,
			delayedcall(0.5,
				if(lpinfo.scene === xml.scene,
					set(control.usercontrol, off);
					set(view, limitview=get(lpinfo.limitview), vlookatmin=null, view.vlookatmax=null);
					tween(view.hlookat|view.vlookat|view.fov|view.distortion, calc('' + lpinfo.hlookat + '|' + lpinfo.vlookat + '|' + lpinfo.fov + '|' + 0.0), 3.0, easeOutQuad);
					delayedcall(3.0,
						set(control.usercontrol, all);
						tween(view.fovmax, get(lpinfo.fovmax));
						skin_deeplinking_update_url();
						delete(global.lpinfo);
						skin_showskin();
						if(skin_settings.thumbs AND skin_settings.thumbs_opened, skin_showthumbs() );
					);
				  ,
					delete(global.lpinfo);
				);
			);
		);
	</action>
	
	
	<action name="skin_lookat" scope="local" args="h, v, fov">
		if(webvr.isenabled,
			<!-- adjust the VR prev/next hotspots for the view change -->
			calc(hlookat_offset, h - view.hlookat);
			add(hotspot[skin_webvr_prev_scene].ath, hlookat_offset);
			add(hotspot[skin_webvr_next_scene].ath, hlookat_offset);
		);
		if(plugin[skin_gyro].isavailable AND plugin[skin_gyro].enabled,
			<!-- reset the gyro tracking -->
			plugin[skin_gyro].resetsensor(get(h));
		);
		<!-- change the view -->
		lookat(get(h), get(v), get(fov));
	</action>


	<action name="skin_onresize" scope="local">
		mul(mh, calc(area.pixelheight / 2) , -1);
		if(layer[skin_thumbs].state == 'opened', add(mh,layer[skin_thumbs].height); add(mh, 65););
		<!-- if(layer[skin_map].state    == 'opened', add(mh, 30); sub(hh,calc(area.pixelheight / 2 + 54),skin_settings.controlbar_offset); sub(hh,layer[skin_control_bar].height); sub(hh,32); add(mh,hh); add(mh,skin_settings.controlbar_overlap); sub(mh, layer[skin_scroll_layer].y_offset); copy(layer[skin_map].height, hh); ); -->
		add(mh, layer[skin_scroll_layer].y_offset);
		set(layer[skin_scroll_layer].y, get(mh));
		if(display.safearea_inset, calc(layer[skin_btn_show].y, skin_settings.controlbar_height - skin_settings.controlbar_offset_closed - (display.safearea_inset.b LT 0 ? display.safearea_inset.b : 0)); );
		skin_video_updateseekbarwidth();
		skin_arrange_buttons();
		<!-- tween(layer[skin_scroll_layer].y,calc(- area.pixelheight / 2), 0, easeOutQuint ); -->
		if(device.mobile OR device.tablet,
			if(layer[skin_thumbs].state != 'closed',
				set(layer[skin_map_layer].y,0);
			);
		);
	</action>


	<!-- determine the visibility of the buttons and calculate their positions -->
	<action name="skin_arrange_buttons" scope="local">
		calc(show_selbuttons, scene.count GT 1);
		calc(show_thumbutton, skin_settings.thumbs == true);
		calc(show_mapbutton,  skin_settings.maps == true);
		calc(show_gyrobutton, plugin[skin_gyro].isavailable == true AND (view.vlookatrange == 180 OR global.lpinfo.scene === xml.scene));
		calc(show_vrbutton,   webvr.isavailable == true);
		calc(show_fsbutton,   device.fullscreensupport == true);

		set(lpos,6);
		set(cpos,0);
		if(show_gyrobutton, dec(cpos,20));
		if(show_vrbutton OR plugin[webvr].mobilevr_fake_support == true, dec(cpos,24));
		set(rpos,6);

		calc(show_dirbuttons, !device.mobile AND ((area.pixelwidth + 2*cpos) GT 520) );

		copy(layer[skin_btn_navi].visible, show_dirbuttons);

		copy(layer[skin_btn_next].visible, show_selbuttons);
		if(show_selbuttons, inc(lpos,44); inc(rpos,44); );

		copy(layer[skin_btn_thumbs].visible, show_thumbutton);
		copy(layer[skin_btn_thumbs].x, lpos);
		if(show_thumbutton, inc(lpos,40));

		copy(layer[skin_btn_map].visible, show_mapbutton);
		copy(layer[skin_btn_map].x, lpos);
		if(show_mapbutton, inc(lpos,40));

		if(show_dirbuttons,
			copy(layer[skin_btn_navi].x, cpos);
			inc(cpos,140);

			set(layer[skin_btn_gyro].align, center);
			copy(layer[skin_btn_gyro].visible, show_gyrobutton);
			copy(layer[skin_btn_gyro].x, cpos);
			if(show_gyrobutton, inc(cpos,48));

			set(layer[skin_btn_vr].align, center);
			copy(layer[skin_btn_vr].visible, show_vrbutton);
			copy(layer[skin_btn_vr].x, cpos);
			if(show_vrbutton, inc(cpos,80));
		  ,
			set(layer[skin_btn_gyro].align, left);
			copy(layer[skin_btn_gyro].visible, show_gyrobutton);
			copy(layer[skin_btn_gyro].x, lpos);
			if(show_gyrobutton, inc(lpos,40));

			set(layer[skin_btn_vr].align, left);
			copy(layer[skin_btn_vr].visible, show_vrbutton);
			copy(layer[skin_btn_vr].x, lpos);
			if(show_vrbutton, inc(lpos,80));
		);

		copy(layer[skin_btn_hide].x, rpos);
		inc(rpos,40);

		copy(layer[skin_btn_fs].visible, show_fsbutton);
		copy(layer[skin_btn_fs].x, rpos);
		if(show_fsbutton, inc(rpos,40));
	</action>


	<action name="skin_updatethumbsview" scope="local" args="scroll">
		if(layer[skin_thumbs].loaded,
			set(cursceneindex, 0);
			if(xml.scene, copy(cursceneindex, scene[get(xml.scene)].index));
			if(scroll == false,
				layer[skin_thumbs].setcenter(get(scene[get(cursceneindex)].thumbx), get(scene[get(cursceneindex)].thumby));
			  ,
				layer[skin_thumbs].scrolltocenter(get(scene[get(cursceneindex)].thumbx), get(scene[get(cursceneindex)].thumby));
			);
		);
	</action>


	<action name="skin_updatethumbscroll" scope="local">
		copy(padding,skin_settings.thumbs_padding);

		if(skin_settings.thumbs_scrollbuttons,
			if(caller.loverflow GT 0, set(layer[skin_thumbs_scrollleft].visible,true),  set(layer[skin_thumbs_scrollleft].visible,false) );
			if(caller.roverflow GT 0, set(layer[skin_thumbs_scrollright].visible,true), set(layer[skin_thumbs_scrollright].visible,false) );
		);

		if(skin_settings.thumbs_scrollindicator,
			if(caller.woverflow GT 0,
				set(layer[skin_thumbs_scrollindicator].visible, true);
				sub(iw,caller.pixelwidth,caller.woverflow);
				div(pw,iw,caller.pixelwidth);
				div(px,caller.loverflow,caller.woverflow);
				mul(pw,iw);
				copy(layer[skin_thumbs_scrollindicator].width, pw);
				sub(iw,pw);
				sub(iw,padding);
				sub(iw,padding);
				mul(px,iw);
				add(px,padding);
				copy(layer[skin_thumbs_scrollindicator].x, px);
			  ,
				set(layer[skin_thumbs_scrollindicator].visible, false);
			);
		);
	</action>


	<action name="skin_update_scene_infos" scope="local">
		if(xml.scene !== null AND scene[get(xml.scene)].index GE 0,

			if(skin_settings.title,
				if(global.title, calc(layer[skin_title].html, global.title + ' - ' +  scene[get(xml.scene)].title); , copy(layer[skin_title].html, scene[get(xml.scene)].title ); );
				if(global.title, calc(layer[skin_title_mobile].html, global.title + ' - ' +  scene[get(xml.scene)].title); , copy(layer[skin_title_mobile].html, scene[get(xml.scene)].title ); );
			);

			if(skin_settings.thumbs_loop == false,
				if(scene[get(xml.scene)].index GT 0,
					set(layer[skin_btn_prev], enabled=true, alpha=1.0);
				  ,
					set(layer[skin_btn_prev], enabled=false, alpha=0.3);
				);

				sub(lastsceneindex, scene.count, 1);
				if(scene[get(xml.scene)].index LT lastsceneindex,
					set(layer[skin_btn_next], enabled=true, alpha=1.0);
				  ,
					set(layer[skin_btn_next], enabled=false, alpha=0.3);
				);
			  ,
				if(scene.count GT 1,
					set(layer[skin_btn_prev], enabled=true, alpha=1.0);
					set(layer[skin_btn_next], enabled=true, alpha=1.0);
				  ,
					set(layer[skin_btn_prev], enabled=false, alpha=0.3);
					set(layer[skin_btn_next], enabled=false, alpha=0.3);
				);
			);

			if(scene.count GT 1,
				set(layer[skin_btn_prev_fs].visible, true);
				set(layer[skin_btn_next_fs].visible, true);
			  ,
				set(layer[skin_btn_prev_fs].visible, false);
				set(layer[skin_btn_next_fs].visible, false);
			);

			calc(parentname, 'skin_thumb_' + scene[get(xml.scene)].thumbindex);
			if(scene[get(xml.scene)].thumburl AND scene[get(xml.scene)].skipthumb != true AND layer[get(parentname)],
				set(layer[skin_thumbborder], parent=get(parentname), visible=true);
			  ,
				set(layer[skin_thumbborder].visible, false);
			);

			if(scene[get(xml.scene)].mapspotname,
				layer[skin_map].activatespot(get(scene[get(xml.scene)].mapspotname));
				layer[skin_map].pantospot(get(scene[get(xml.scene)].mapspotname));
				if( isvalue(scene[get(xml.scene)].mapzoom),
					tween(layer[skin_map].zoom, get(scene[get(xml.scene)].mapzoom), 0.5);
				);
			);

			if(plugin[skin_gyro].isavailable == true AND (view.vlookatrange == 180 OR global.lpinfo.scene === xml.scene),
				set(layer[skin_btn_gyro].visible, true);
			  ,
				set(layer[skin_btn_gyro].visible, false)
			);
			
			if(scene[get(xml.scene)].isvideopano AND plugin[video] !== null,
				skin_video_addcontrols();
			  ,
				skin_video_removecontrols();
			);
		);
	</action>
	

	<action name="skin_gotoscene" scope="local" args="newscene">
		if(scene[get(newscene)],
			copy(cursceneindex, scene[get(xml.scene)].index);
			copy(newsceneindex, scene[get(newscene)].index);
			skin_loadscene(get(newsceneindex), calc(newsceneindex LT cursceneindex ? skin_settings.loadscene_blend_prev : (newsceneindex GT cursceneindex ? skin_settings.loadscene_blend_next : skin_settings.loadscene_blend)) );
		);
	</action>


	<action name="skin_nextscene" scope="local" args="indexadd">
		set(newscenename, null);
		if(isset(scene[get(xml.scene)].thumbindex),
			add(newsceneindex, scene[get(xml.scene)].thumbindex, indexadd);
			if(newsceneindex GE 0 AND newsceneindex LT thumbarray.length,
				set(newscenename, get(thumbarray[get(newsceneindex)].name));
			);
		  ,
			add(newsceneindex, scene[get(xml.scene)].index, indexadd);
			if(newsceneindex GE 0 AND newsceneindex LT scene.count,
				set(newscenename, get(scene[get(newsceneindex)].name));
			);
		);
		if(newscenename != null,
			skin_loadscene(get(newscenename), calc(indexadd LT 0 ? skin_settings.loadscene_blend_prev : skin_settings.loadscene_blend_next));
		);
	</action>


	<action name="skin_nextscene_loop" scope="local" args="indexadd">
		set(newscenename, null);
		if(isset(scene[get(xml.scene)].thumbindex),
			sub(lastsceneindex, thumbarray.length, 1);
			add(newsceneindex, scene[get(xml.scene)].thumbindex, indexadd);
			if(newsceneindex LT 0, copy(newsceneindex,lastsceneindex));
			if(newsceneindex GT lastsceneindex, set(newsceneindex,0));
			set(newscenename, get(thumbarray[get(newsceneindex)].name));
		  ,
			add(newsceneindex, scene[get(xml.scene)].index, indexadd);
			sub(lastsceneindex, scene.count, 1);
			if(newsceneindex LT 0, copy(newsceneindex,lastsceneindex));
			if(newsceneindex GT lastsceneindex, set(newsceneindex,0));
			set(newscenename, get(scene[get(newsceneindex)].name));
		);
		if(newscenename != null,
			skin_loadscene(get(newscenename), calc(indexadd LT 0 ? skin_settings.loadscene_blend_prev : skin_settings.loadscene_blend_next));
		);
	</action>


	<action name="skin_loadscene" scope="local" args="newscenenameorindex, blendmode">
		if(webvr.isenabled AND scene.count GT 1,
			set(hotspot[skin_webvr_prev_scene].visible, false);
			set(hotspot[skin_webvr_next_scene].visible, false);
		);

		calc(parentname, 'skin_thumb_' + scene[get(newscenenameorindex)].thumbindex);
		if(scene[get(newscenenameorindex)].thumburl AND scene[get(newscenenameorindex)].skipthumb != true AND layer[get(parentname)],
			set(layer[skin_thumbborder], parent=get(parentname), visible=true);
		  ,
			set(layer[skin_thumbborder].visible, false);
		);
		
		layer[skin_thumbs].scrolltocenter(get(scene[get(newscenenameorindex)].thumbx), get(scene[get(newscenenameorindex)].thumby));
		
		if(blendmode == null, 
			blendmode = skin_settings.loadscene_blend;
		);
    	set(global.scence_array[get(global.scence_array.count)], get(scene[get(xml.scene)].name));
		set(global.scence_array.count, calc(global.scence_array.count + 1));
		loadscene(get(scene[get(newscenenameorindex)].name), null, get(skin_settings.loadscene_flags), get(blendmode));
	</action>

	<action name="go_back" scope="local">
		if(global.scence_array.count GT 0,
			set(lastscene, get(global.scence_array[get(calc(global.scence_array.count - 1))]));
			if(get(lastscene) != null,
				loadscene(get(scene[get(lastscene)].name), null, get(skin_settings.loadscene_flags), get(skin_settings.loadscene_blend_prev));
				set(global.scence_array.count, calc(global.scence_array.count - 1));
			);
		);
	</action>
	
	<action name="skin_loadtour" scope="local" args="xmlpath, startscene, flags, blendmode">
		<!-- remove the current thumbs -->
		set(layer[skin_thumbborder], parent=null, visible=false);
		calc(i,layer.count-1);
		loop(i GE 0,
			if (indexof(layer[get(i)].name, 'skin_thumb_') == 0,
				removelayer(get(i),true);
			);
			dec(i),
		);
		
		<!-- disable deeplinking as it wouldn't work anymore with another tour -->
		skin_settings.deeplinking = false;
		
		if (startscene == null, startscene = 0; );
		if (flags == null, flags = skin_settings.loadscene_flags; );
		if (blendmode == null, blendmode = skin_settings.loadscene_blend; );
		
		flags = flags + '|ONLYSCENES';
		
		loadpanoscene(get(xmlpath), get(startscene), null, get(flags), get(blendmode));
		skin_addthumbs();
		
		set(layer[skin_thumbborder], parent=calc('skin_thumb_' + scene[get(xml.scene)].index), visible=true);
		layer[skin_thumbs].setcenter(get(scene[get(xml.scene)].thumbx), get(scene[get(xml.scene)].thumby));
	</action>

	<action name="skin_showloading" scope="private:SKINLOADINGCHECK" args="state">
		if(state == true AND global.display.stereo == false,
			<!-- start loading -->
			set(loadingstate, 1);
			delayedcall(2.0,
				if(loadingstate == 1,
					<!-- after 2.0 seconds still not loaded? => show the loading text -->
					set(global.layer[skin_loadingtext].visible, true);
				);
			);
		  ,
			<!-- stop loading -->
			set(loadingstate, 2);
			set(global.layer[skin_loadingtext].visible, false);
		);
	</action>


	<action name="skin_hidetooltips">
		set(layer[skin_tooltip], alpha=0.0, visible=false);
	</action>


	<action name="skin_buttonglow" scope="local" args="layertoglow, strength">
		if(layertoglow != null,
			if(strength == null, strength=0.7; );
			parentlayer = layer[get(layertoglow)];
			if(parentlayer.scalechildren, layer[skin_buttonglow].scale = 1.0/parentlayer.scale );
			set(layer[skin_buttonglow], parent=get(layertoglow), visible=true);
			tween(layer[skin_buttonglow].alpha, get(strength), 0.07);
		  ,
			tween(layer[skin_buttonglow].alpha, 0.0, 0.1, default, set(layer[skin_buttonglow], parent=null, visible=false); );
		);
	</action>

	<action name="skin_hover" scope="local" args="layertoglow, strength, children">
		if(layertoglow != null,
			if(strength == null, strength=0.7; );
			parentlayer = layer[get(layertoglow)];
			set(layer[get(layertoglow)].bgcolor, 0x323740);
			set(layer[get(layertoglow)].bgalpha, 1.0);
		  ,
			set(layer[get(children)].background, false);
			set(layer[get(children)].bgcolor, 0x6278a1);
		);
	</action>

	<action name="map_hover" scope="local" args="layertoglow">
		if(layertoglow != null,
		set(layer[skin_map_layer].alpha, 0.7);
		,
		set(layer[skin_map_layer].alpha, 1);
		);
	</action>

	<action name="skin_calc_opened_closed">
		if(layer[get(name)].y_closed === null,
			set(layer[get(name)].y_opened, get(layer[get(name)].x));
			set(layer[get(name)].y_closed, calc(layer[get(name)].x - skin_settings.controlbar_offset - skin_settings.controlbar_height + skin_settings.controlbar_offset_closed));
		);
	</action>


	<action name="skin_hideskin" scope="local" args="hidetimemode">
		calc(hidetime, hidetimemode == 'instant' ? 0.0 : 0.5);
		
		callwith(layer[skin_scroll_window],   skin_calc_opened_closed() );
		callwith(layer[skin_splitter_bottom], skin_calc_opened_closed() );
		callwith(layer[skin_control_bar],     skin_calc_opened_closed() );

		if(layer[skin_map].state    != 'closed', skin_showmap(false);    if(hidetime GT 0, wait(0.40)); );
		if(layer[skin_thumbs].state != 'closed', skin_showthumbs(false); if(hidetime GT 0, wait(0.25)); );

		tween(layer[skin_scroll_window].x,   get(layer[skin_scroll_window  ].y_closed), get(hidetime));
		tween(layer[skin_splitter_bottom].x, get(layer[skin_splitter_bottom].y_closed), get(hidetime));
		tween(layer[skin_control_bar].x,     get(layer[skin_control_bar    ].y_closed), get(hidetime));

		<!-- set(layer[skin_btn_prev_fs].enabled, true); -->
		set(layer[skin_btn_show_menu].enabled, true);
		<!-- tween(layer[skin_btn_prev_fs].x|layer[skin_btn_prev_fs].alpha, 0|0.25, get(hidetime)); -->
		tween(layer[skin_btn_show_menu].x|layer[skin_btn_show_menu].alpha, 0|1.0, get(hidetime));

		if(layer[skin_logo], tween(layer[skin_logo].alpha, 0.0, 0.5, default, set(layer[skin_logo].visible,false)); );

		stopdelayedcall(skin_btn_show_alpha);
		set(layer[skin_btn_show_menu].visible, true);
		delayedcall(skin_btn_show_alpha, get(hidetime), tween(layer[skin_btn_show_menu].alpha, 0.85, 0.85); );
	</action>


	<action name="skin_showskin">
		tween(layer[skin_scroll_window  ].x, get(layer[skin_scroll_window  ].y_opened));
		tween(layer[skin_splitter_bottom].x, get(layer[skin_splitter_bottom].y_opened));
		tween(layer[skin_control_bar    ].x, get(layer[skin_control_bar    ].y_opened));

		set(layer[skin_btn_prev_fs].enabled, false);
		set(layer[skin_btn_next_fs].enabled, false);
		tween(layer[skin_btn_prev_fs].x|layer[skin_btn_prev_fs].alpha, -50|0.0);
		tween(layer[skin_btn_next_fs].x|layer[skin_btn_next_fs].alpha, -50|0.0);

		if(layer[skin_logo], set(layer[skin_logo].visible,true); tween(layer[skin_logo].alpha, 1.0); );

		stopdelayedcall(skin_btn_show_alpha);
		set(layer[skin_btn_show_menu].visible, false);
		delayedcall(skin_btn_show_alpha, 0.25, tween(layer[skin_btn_show_menu].alpha, 0.0, 0.0); );
	</action>


	<action name="skin_showthumbs" scope="local" args="show">
		if(show == null, if(layer[skin_thumbs].state == 'closed', set(show,true), set(show,false)); );
		if(show,
			set(layer[skin_thumbs].state, 'opened');
			tween(layer[skin_thumbs].alpha, 1.0, 0.25);
			tween(layer[skin_scroll_layer].y, calc(- area.pixelheight / 2 + layer[skin_thumbs].height + 65), 0.5, easeOutQuint);
			set(layer[skin_thumbs_container].visible, true);
			tween(layer[skin_thumbs_container].alpha, 1.0, 0.25);
			tween(layer[skin_map].alpha, 0.0, 0.25, default, set(layer[skin_map].visible,false));
		  ,
			set(layer[skin_thumbs].state, 'closed');
			tween(layer[skin_thumbs].alpha, 0.0, 0.25, easeOutQuint);
			tween(layer[skin_scroll_layer].y, calc(- area.pixelheight / 2), 0.5, easeOutQuint, set(layer[skin_thumbs_container].visible, false););
		);
	</action>


	<action name="skin_showmap" scope="local" args="show">
		if(show == null, 
			if(layer[skin_map].state == 'closed'
				, 
				set(show,true); 
				if(device.mobile OR device.tablet,
					tween(layer[skin_scroll_window].x,   0);
					set(layer[skin_map_layer].oy, -50%);
					set(layer[skin_map_layer].width, 100%);
					set(layer[skin_map_layer].height, 50%);
					set(layer[skin_map_container].width, 100%);
					set(layer[skin_map_container].height, 100%);
					set(layer[skin_map].width, 100%);
					set(layer[skin_map].height, 100%);
					set(layer[skin_map_layer].alpha, 1);

				)
				,
				set(show,false);
			); 
		);
		if(show,
			skin_load_maps_plugin();
			tween(layer[skin_thumbs_container].alpha, 0.0, 0.25, default, set(layer[skin_thumbs_container].visible,false));
			set(layer[skin_map].visible, true);
			tween(layer[skin_map].alpha, 1.0, 0.25);
			set(layer[skin_map].state, 'opened');
			calc(hh, area.pixelheight - skin_settings.controlbar_offset - layer[skin_control_bar].height + 32);
			calc(layer[skin_map].height, hh - skin_settings.controlbar_overlap);
			tween(layer[skin_map_layer].y, 0);
		  ,
		  	if(layer[skin_map].state != 'closed',
				set(layer[skin_map].state, 'closed');
				tween(layer[skin_map].alpha, 0.0, 0.5, easeOutQuint);
				tween(layer[skin_map_layer].y, calc(- area.pixelheight / 2-50), 0.5, easeOutQuint, set(layer[skin_map].visible,false) );
				if(device.mobile OR device.tablet,
					tween(layer[skin_map_layer].y, calc(- area.pixelheight -100), 0.5, easeOutQuint, set(layer[skin_map].visible,false) );
				)
				
			);
		);
	</action>


	<action name="skin_keydown_event">
		if(keycode == 33, skin_nextscene_loop(-1) );            	<!-- Page Up   - previous scene -->
		if(keycode == 34, skin_nextscene_loop(+1) );            	<!-- Page Dowm - next scene -->
		if(keycode == 35, skin_gotoscene(calc(scene.count-1)) );	<!-- End       - last scene -->
		if(keycode == 36, skin_gotoscene(0) );                  	<!-- Home/Pos1 - first scene -->
	</action>


	<action name="skin_deeplinking_update_url" scope="local" args="delay">
		if(skin_settings.deeplinking AND (!webvr OR webvr.isenabled != true) AND global.lpinfo === null,
			delayedcall(skin_deeplinking_update, calc(delay == null ? 0.1 : delay), skin_deeplinking_update_url_process() );
		);
	</action>

	<action name="skin_deeplinking_update_url_process" scope="local">
		copy(adr, browser.location);
		indexoftxt(qi, get(adr), '?');
		if(qi GT 0, subtxt(adr, adr, 0, get(qi)));
		copy(si, scene[get(xml.scene)].index);
		copy(h, view.hlookat);
		copy(v, view.vlookat);
		copy(f, view.fov);
		copy(d, view.distortion);
		copy(a, view.architectural);
		clamp(d, 0.0, 1.0);
		clamp(a, 0.0, 1.0);
		set(pp, calc(f LT 10 ? 6 : 2));
		roundval(h, get(pp));
		roundval(v, get(pp));
		roundval(f, get(pp));
		roundval(d, 2);
		roundval(a, 1);
		set(adr, calc(adr + '?startscene=' + si + '&amp;startlookat='+h+','+v+','+f+','+d+','+a+';'));
		js( history.replaceState(null, document.title, get(adr)); );
	</action>


	<!-- reload the scene when there is a special image for VR -->
	<action name="skin_reloadscene_webvr" scope="local">
		delayedcall(0.1,
			if(scene[get(xml.scene)].havevrimage,
				copy(skin_settings.keeplookingdirection_backup, skin_settings.webvr_keeplookingdirection);
				set(skin_settings.webvr_keeplookingdirection, true);
				loadscene(get(xml.scene), null, MERGE|KEEPVIEW|KEEPMOVING|KEEPPLUGINS|KEEPHOTSPOTS, BLEND(0.5));
				copy(skin_settings.webvr_keeplookingdirection, skin_settings.keeplookingdirection_backup);
				delete(skin_settings.keeplookingdirection_backup);
			);
		);
	</action>


	<!-- videopano support - https://krpano.com/plugins/videoplayer/ -->
	<action name="skin_video_addcontrols">
		set(events[skin_events].onclick, skin_video_clickevent() );

		set(plugin[video].onvideoready, skin_video_updatestate() );
		set(plugin[video].onvideoplay, skin_video_updatestate() );
		set(plugin[video].onvideopaused, skin_video_updatestate() );
		set(plugin[video].onvideocomplete, skin_video_updatestate() );

		if(plugin[video].ispaused AND plugin[video].pausedonstart,
			set(layer[skin_video_playpause].state, 'visible');
			set(layer[skin_video_playpause].enabled, true);
			tween(layer[skin_video_playpause].alpha, 1.0);
		);

		delayedcall(skin_video_delayedvisible, 0.25, set(layer[skin_video_controls].visible, true) );

		skin_video_updateseekbarwidth();
		set(layer[skin_video_seekpos].x,0);
		set(layer[skin_video_loadbar].width,0);

		setinterval(skin_video_seek_updates, 0.5, skin_video_updatetime() );
	</action>

	<action name="skin_video_removecontrols">
		stopdelayedcall(skin_video_delayedvisible);

		set(events[skin_events].onclick, null);

		set(layer[skin_video_playpause].alpha, 0.0);
		set(layer[skin_video_controls].visible, false);

		clearinterval(skin_video_seek_updates);
	</action>

	<action name="skin_video_updatetime" scope="local" args="seekpos">
		copy(t1, plugin[video].time);
		copy(t2, plugin[video].totaltime);
		if(seekpos != null, calc(t1, seekpos * t2); );
		div(t1_min, t1, 60);
		mod(t1_sec, t1, 60);
		Math.floor(t1_min);
		Math.floor(t1_sec);
		div(t2_min, t2, 60);
		mod(t2_sec, t2, 60);
		Math.floor(t2_min);
		Math.floor(t2_sec);
		calc(layer[skin_video_time].html, t1_min + ':' + (t1_sec LT 10 ? '0' : '') + t1_sec + ' / ' + t2_min + ':' + (t2_sec LT 10 ? '0' : '') + t2_sec);
		calc(layer[skin_video_seekpos].x, (t1 / t2 * 100) + '%');
		calc(layer[skin_video_loadbar].width, (plugin[video].loadedbytes / plugin[video].totalbytes * 100) + '%');
	</action>

	<action name="skin_video_updateseekbarwidth">
		if(skin_settings.title,
			calc(layer[skin_video_seekbar_container].width, 0 - (32 + layer[skin_title_mobile].pixelwidth + layer[skin_video_time].pixelwidth));
			calc(layer[skin_video_seekbar_container].x, layer[skin_title_mobile].pixelwidth + 16);
		  ,
			calc(layer[skin_video_seekbar_container].width, 0 - (24 + layer[skin_video_time].pixelwidth));
			set(layer[skin_video_seekbar_container].x, 8);
		);
	</action>

	<action name="skin_video_ondownseeking" scope="local">
		asyncloop(caller.pressed,
			screentolayer(skin_video_seekbar, mouse.stagex,mouse.stagey, lx,ly);
			calc(seekpos, lx / layer[skin_video_seekbar].pixelwidth);
			clamp(seekpos, 0.0, 1.0);
			skin_video_updatetime(get(seekpos));
		  ,
			plugin[video].seek(calc((seekpos * 100) + '%'));
		);
	</action>

	<layer name="skin_video_playpause" keep="true"
	         style="skin_base|skin_glow" crop="0|640|64|64" scale="0.75"
	         align="center" alpha="0.0" autoalpha="true"
	         state="hidden"
	         onclick="skin_video_playpause_click();"
	         />

	<action name="skin_video_updatestate">
		calc(layer[skin_video_playpause].crop, plugin[video].ispaused ? '0|640|64|64' : '64|640|64|64');
		if(plugin[video].iscomplete,
			set(layer[skin_video_playpause].state, 'visible');
			tween(layer[skin_video_playpause].alpha, 1.0);
		);
	</action>

	<action name="skin_video_playpause_click">
		if(plugin[video].ispaused,
			plugin[video].play();
			set(layer[skin_video_playpause].state, 'hidden');
			tween(layer[skin_video_playpause].alpha, 0.0);
		  ,
			plugin[video].pause();
			set(layer[skin_video_playpause].state, 'visible');
			tween(layer[skin_video_playpause].alpha, 1.0);
			delayedcall(autohide_pp, 2.0, set(layer[skin_video_playpause].state,'hidden'); tween(layer[skin_video_playpause].alpha, 0.0); );
		);
	</action>

	<action name="skin_video_clickevent">
		stopdelayedcall(autohide_pp);

		switch(layer[skin_video_playpause].state, 'visible', 'hidden');

		if(layer[skin_video_playpause].state == 'hidden',
			tween(layer[skin_video_playpause].alpha, 0.0);
		  ,
			tween(layer[skin_video_playpause].alpha, 1.0);
			delayedcall(autohide_pp, 2.0, set(layer[skin_video_playpause].state,'hidden'); tween(layer[skin_video_playpause].alpha, 0.0); );
		);
	</action>
	
	
	<!-- autotour/autoplay support -->
	<autorotate enabled="calc:skin_settings.autotour == true"
	            waittime="5.0"
	            accel="0.7"
	            speed="4.0"
	            tofov="120"
	            oneroundrange="360"
	            />
	
	<events name="skin_autotour" keep="true"
		onautorotatestart="if(skin_settings.autotour, skin_autotour_start(); );"
		onautorotatestop="if(skin_settings.autotour, skin_autotour_stop(); );"
		/>
	
	<action name="skin_autotour_start" scope="PRIVATE:skin_autotour">
		copy(loadscene_flags_backup, global.skin_settings.loadscene_flags);
		set(global.skin_settings.loadscene_flags, MERGE|KEEPVIEW|KEEPMOVING|PRELOAD);
		copy(loadscene_blend_next_backup, global.skin_settings.loadscene_blend_next);
		set(global.skin_settings.loadscene_blend_next, SLIDEBLEND(2.0, 0, 0.75, linear) );
	</action>
	
	<action name="skin_autotour_stop" scope="PRIVATE:skin_autotour">
		copy(global.skin_settings.loadscene_flags, loadscene_flags_backup);
		copy(global.skin_settings.loadscene_blend_next, loadscene_blend_next_backup);
	</action>


	<!-- context menu - https://krpano.com/docu/xml/#contextmenu -->
	<contextmenu fullscreen="true" versioninfo="true">
		<item name="kr" caption="KRPANO" />
		<item name="fs" caption="FULLSCREEN" />
		<item name="cm" separator="above" caption="" />
		<item name="nv" caption="Normal View"        onclick="skin_view_normal();"        showif="view.vlookatrange == 180" separator="above" />
		<item name="fv" caption="Fisheye View"       onclick="skin_view_fisheye();"       showif="view.vlookatrange == 180" devices="webgl" />
		<item name="sv" caption="Stereographic View" onclick="skin_view_stereographic();" showif="view.vlookatrange == 180" devices="webgl" />
		<item name="av" caption="Architectural View" onclick="skin_view_architectural();" showif="view.vlookatrange == 180" />
		<item name="pv" caption="Pannini View"       onclick="skin_view_pannini();"       showif="view.vlookatrange == 180" devices="webgl" />
		<item name="lp" caption="Little Planet View" onclick="skin_view_littleplanet();"  showif="view.vlookatrange == 180" devices="webgl" />
		<item name="sa" caption="Start Autotour"     onclick="autorotate.start();" separator="both" showif="autorotate.isrotating == false" visible="calc:skin_settings.autotour == true" />
		<item name="ta" caption="Stop Autotour"      onclick="autorotate.stop();"  separator="both" showif="autorotate.isrotating == true"  visible="calc:skin_settings.autotour == true" />
	</contextmenu>
	
	<events name="skin_contextmenu" keep="true"
		oncontextmenu="skin_update_contextmenu();"
		/>
	
	<action name="skin_update_contextmenu">
		contextmenu.item[cm].caption = 'Control Mode: ' +
			'[a href=[sq]krpano:set(control.mode,drag);[sq]   style=[sq]color:inherit;text-decoration:' + (control.mode == 'drag'   ? 'underline' : 'none') + ';[sq]]Drag[/a] | ' +
			'[a href=[sq]krpano:set(control.mode,follow);[sq] style=[sq]color:inherit;text-decoration:' + (control.mode == 'follow' ? 'underline' : 'none') + ';[sq]]Follow[/a] | ' +
			'[a href=[sq]krpano:set(control.mode,moveto);[sq] style=[sq]color:inherit;text-decoration:' + (control.mode == 'moveto' ? 'underline' : 'none') + ';[sq]]MoveTo[/a]';
	</action>


	<action name="skin_view_look_straight">
		if(view.vlookat LT -80 OR view.vlookat GT +80,
			tween(view.vlookat, 0.0, 1.0, easeInOutSine);
			tween(view.fov,     100, distance(150,0.8));
		);
		skin_deeplinking_update_url(1.0);
	</action>

	<action name="skin_view_normal">
		skin_view_look_straight();
		tween(view.architectural, 0.0, distance(1.0,0.5));
		tween(view.pannini,       0.0, distance(1.0,0.5));
		tween(view.distortion,    0.0, distance(1.0,0.5));
	</action>

	<action name="skin_view_fisheye">
		skin_view_look_straight();
		tween(view.architectural, 0.0,  distance(1.0,0.5));
		tween(view.pannini,       0.0,  distance(1.0,0.5));
		tween(view.distortion,    0.35, distance(1.0,0.5));
	</action>

	<action name="skin_view_architectural">
		skin_view_look_straight();
		tween(view.architectural, 1.0, distance(1.0,0.5));
		tween(view.pannini,       0.0, distance(1.0,0.5));
		tween(view.distortion,    0.0, distance(1.0,0.5));
	</action>

	<action name="skin_view_stereographic">
		skin_view_look_straight();
		tween(view.architectural, 0.0, distance(1.0,0.5));
		tween(view.pannini,       0.0, distance(1.0,0.5));
		tween(view.distortion,    1.0, distance(1.0,0.8));
	</action>

	<action name="skin_view_pannini">
		skin_view_look_straight();
		tween(view.architectural, 0.0, distance(1.0,0.5));
		tween(view.pannini,       1.0, distance(1.0,0.8));
		if(view.distortion LT 0.1,
			tween(view.distortion, 1.0, distance(1.0,0.8));
		);
	</action>

	<action name="skin_view_littleplanet">
		tween(view.architectural, 0.0, distance(1.0,0.5));
		tween(view.pannini,       0.0, distance(1.0,0.5));
		tween(view.distortion,    1.0, distance(1.0,0.8));
		tween(view.fov,           150, distance(150,0.8));
		tween(view.vlookat,        90, distance(100,0.8));
		tween(view.hlookat, calc(view.hlookat + 100.0 + 45.0*random), distance(100,0.8));
		skin_deeplinking_update_url(1.0);
	</action>
	
	
	<action name="skin_followmouse_init" scope="private:skinfollowmouse" autorun="onstart" devices="desktop.and.no-touch">
		if(global.skin_settings.followmousecontrol,
			set(followspeed, 0.05);
			set(followrange, 10);
			set(followfactor, 1.0);
			set(track_ry, 0);
			set(track_rx, 0);
			set(global.events[skin_followmouse].keep, true);
			set(global.events[skin_followmouse].onviewchanged, set(global.view.haschanged,true); );
			set(global.events[skin_followmouse].onviewchange, skin_followmouse_onviewchange() );
			set(global.events[skin_followmouse].onmousedown, scope(private:skinfollowmouse, stopdelayedcall(followmouse_reenable); tween(followfactor,0.0,0.2); ); );
			set(global.events[skin_followmouse].onmouseup, scope(private:skinfollowmouse, delayedcall(followmouse_reenable, 1.0, tween(followfactor,1.0,3.0) ); ); );
		  );
	</action>
	
	<action name="skin_followmouse_onviewchange" scope="private:skinfollowmouse">
		if(global.mouse.x != 0 AND global.mouse.y != 0,
			Math.tan(zoomscale, calc(global.view.vfov * 0.5 * Math.PI / 180.0));
			calc(zoomscale, 1.0 / zoomscale);
			Math.max(zoomscale, 1.0);
			calc(new_ry, followfactor/zoomscale * followrange * (global.mouse.x / global.stagewidth - 0.5));
			calc(new_rx, followfactor/zoomscale * followrange * (global.mouse.y / global.stageheight - 0.5));
			calc(track_ry, track_ry*(1.0-followspeed) + new_ry*followspeed);
			calc(track_rx, track_rx*(1.0-followspeed) + new_rx*followspeed);
			copy(global.view.ry, track_ry);
			copy(global.view.rx, track_rx);
		);
	</action>
	
	
	
	<!-- A helper script for getting into fullscreen mode on the iPhone. -->
	
	<events name="iphone_fullscreen_swipe" keep="true" devices="iphone"
			oniphonefullscreen="iphone_fullscreen_swipe();"
			/>
		
	<action name="iphone_fullscreen_swipe" scope="localonly">
		if(global.display.iphonefullscreen GT 0,
			if(!global.layer[iphone_fullscreen_info],
				addlayer('iphone_fullscreen_info', infolayer);
				set(infolayer, type=text, css='color:#FFFFFF; font-size:26px; font-weight:bold; text-align:center;', txtshadow='0 0 8 0x000000 1', bgcolor=0x000000, bgalpha=0.7, bgcapture=true, align=lefttop, x=0, y=0, width=100%, height=100%, vcenter=true, keep=true, zorder=9999, safearea=false);
				if(global.display.iphonefullscreen == 1,
					set(infolayer.html, '[span style="font-size:60px;"]⇡[/span][br]Swipe Up');
				  ,
					set(infolayer.html, '[span style="font-size:60px;"]⇣ ⇡[/span][br]Swipe Down and Up');
				);
			);
		  ,
			removelayer('iphone_fullscreen_info');
		);
	</action>
	

</krpano>
